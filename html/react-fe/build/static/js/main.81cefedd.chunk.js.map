{"version":3,"sources":["ExpandedText.js","IsoField.js","Properties.js","SelectMessageDialog.js","ResponseSegment.js","ParseMessageDialog.js","SaveMessageDialog.js","FieldValidator.js","MessageStructure.js","NavBar.js","App.js","serviceWorker.js","index.js"],"names":["ExpandedText","props","state","show","value","closeThis","bind","valueChanged","event","this","setState","target","onClose","prevProps","prevState","snapshot","Fragment","style","borderBottom","borderColor","fontFamily","width","minHeight","maxHeight","onChange","disabled","readOnly","height","Button","size","float","fontSize","onClick","React","Component","IsoField","fieldValueChanged","fieldSelectionChanged","onFieldUpdate","appendFieldContent","setSelected","setNewValue","showExpanded","closeExpanded","getBgColor","setError","selectable","bgColor","hasError","selected","id2Value","fieldValue","get","field","Id","defaultFieldValue","includes","Name","Array","fill","reduce","p","c","isoMsg","set","newValue","console","log","fieldName","ChangeType","Type","Children","forEach","f","currentVal","bits","from","Position","turnOff","i","obj","checked","content","parentField","level","key","push","selectionColumnContent","align","type","positionInParent","ParentId","fieldInfo","FixedSize","DataEncoding","LengthIndicatorSize","LengthEncoding","children","levelIndicator","OverlayTrigger","overlay","Tooltip","id","placement","color","backgroundColor","ondblclick","marginRight","colSpan","appProps","baseUrl","sendMsgUrl","loadMsgUrl","allSpecsUrl","templateUrl","parseTraceUrl","saveMsgUrl","SelectMessageDialog","selectedMsg","closeDialogSuccess","closeDialogFail","selectedMsgChanged","axios","params","specId","msgId","then","res","savedMsgs","data","catch","e","errorMessage","response","closeLoadMsgDialog","map","sm","Modal","onHide","Header","closeButton","Title","Body","Footer","variant","ResponseSegment","msgTemplate","idToField","Map","Value","Fields","border","ParseMessageDialog","traceMsg","traceChanged","setTrace","SaveMessageDialog","msgName","msgNameChanged","postData","JSON","stringify","post","msgSaveSuccess","msgSaveFailed","msgSaveCancelled","errorContent","fieldValidator","validate","fieldData","errors","validationFailed","length","match","MessageStructure","specs","spec","msg","loaded","shouldShow","showMsgTemplate","targetServerIp","targetServerPort","mliType","currentDataSet","errDialogVisible","showLoadMessagesDialog","showTraceInputDialog","showSaveMsgDialog","showResponse","responseData","sendToHost","addFieldContent","serverIpChanged","serverPortChanged","mliTypeChanged","showErrorDialog","closeErrorDialog","processError","showUnImplementedError","showTraceInputsDialog","showInfoDialog","trace","fd","dsName","saveData","validationErrors","fData","cf","errMsg","status","getMessageTemplate","pSpec","pMsg","find","s","Messages","m","url","err","alignContent","alignSelf","font","verticalAlign","alignItems","margin","colspan","NavBar","currentSpec","currentSpecMsg","specChanged","messageChanged","msgTemplateRef","createRef","getCurrentSpec","left","top","specsDropDown","messagesDropDown","ref","getSpecByName","name","App","href","className","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.81cefedd.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Button} from \"react-bootstrap\";\r\n\r\nexport default class ExpandedText extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {show: this.props.show, value: this.props.value};\r\n    this.closeThis = this.closeThis.bind(this);\r\n    this.valueChanged = this.valueChanged.bind(this);\r\n  }\r\n\r\n  valueChanged(event) {\r\n    this.setState({value: event.target.value});\r\n  }\r\n\r\n  closeThis() {\r\n    this.setState({show: true});\r\n    this.props.onClose(this.state.value);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (prevProps.show === false && this.props.show === true && this.state.show\r\n        === false) {\r\n      this.setState({show: true, value: this.props.value})\r\n    } else if (this.props.show === false && this.state.show\r\n        === true) {\r\n      this.setState({show: false, value: this.props.value})\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n\r\n        (this.state.show === true) ?\r\n\r\n            <React.Fragment>\r\n              <div style={{borderBottom: 'solid', borderColor: 'red'}}>\r\n\r\n        <textarea\r\n            style={{\r\n              fontFamily: \"courier new\",\r\n              width: '100%',\r\n              minHeight: '80px',\r\n              maxHeight: '200px'\r\n            }}\r\n            onChange={this.valueChanged} disabled={this.props.readOnly} value={this.state.value}/>\r\n\r\n                <div style={{height: '25px'}}>\r\n                  <Button size={\"sm\"} style={{\r\n                    float: 'right', fontSize: '10px'\r\n                  }} onClick={this.closeThis}> OK </Button>\r\n                </div>\r\n              </div>\r\n            </React.Fragment>\r\n            :\r\n            null\r\n    );\r\n  }\r\n\r\n}","import React from \"react\";\r\nimport ExpandedText from './ExpandedText.js'\r\nimport {Button} from \"react-bootstrap\";\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\r\nimport Tooltip from 'react-bootstrap/Tooltip'\r\n\r\n// IsoField represents a single field from a ISO8583 specification\r\nexport default class IsoField extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.fieldValueChanged = this.fieldValueChanged.bind(this);\r\n    this.fieldSelectionChanged = this.fieldSelectionChanged.bind(this);\r\n    this.onFieldUpdate = this.onFieldUpdate.bind(this);\r\n    this.appendFieldContent = this.appendFieldContent.bind(this);\r\n    this.setSelected = this.setSelected.bind(this);\r\n    this.setNewValue = this.setNewValue.bind(this);\r\n    this.showExpanded = this.showExpanded.bind(this);\r\n    this.closeExpanded = this.closeExpanded.bind(this);\r\n    this.getBgColor = this.getBgColor.bind(this);\r\n    this.setError = this.setError.bind(this);\r\n\r\n    //if the field is Message Type, MTI or Bitmap - it should stay selected\r\n    //because they're mandatory fields in ISO\r\n\r\n    this.selectable = true;\r\n    //readOnly is true when displaying a response segment\r\n    if (this.props.readOnly) {\r\n      this.selectable = false;\r\n      this.state = {\r\n        bgColor: 'white',\r\n        hasError: false,\r\n        selected: true,\r\n        id2Value: this.props.id2Value,\r\n        fieldValue: this.props.id2Value.get(this.props.field.Id),\r\n        showExpanded: false\r\n      };\r\n    } else {\r\n      let defaultFieldValue = \"\";\r\n      if ([\"Message Type\", \"MTI\", \"Bitmap\"].includes(\r\n          this.props.field.Name)) {\r\n        this.selectable = false;\r\n        if (this.props.field.Name === \"Bitmap\") {\r\n          defaultFieldValue = Array(128).fill('0').reduce((p = \"\", c) => p + c);\r\n        }\r\n\r\n        this.state = {\r\n          bgColor: \"white\",\r\n          hasError: false,\r\n          selected: true,\r\n          fieldValue: defaultFieldValue,\r\n          showExpanded: false\r\n        };\r\n      } else {\r\n        this.state = {\r\n          bgColor: \"white\",\r\n          selected: false,\r\n          hasError: false,\r\n          fieldValue: defaultFieldValue,\r\n          showExpanded: false\r\n        };\r\n      }\r\n      this.props.isoMsg.set(this.props.field.Id, this);\r\n    }\r\n  }\r\n\r\n  getBgColor() {\r\n    if (this.state.hasError) {\r\n      return \"red\";\r\n    } else {\r\n      return \"white\";\r\n    }\r\n\r\n  }\r\n\r\n  setError(hasError) {\r\n    this.setState({hasError: hasError});\r\n  }\r\n\r\n  showExpanded() {\r\n    this.setState({showExpanded: true});\r\n  }\r\n\r\n  closeExpanded() {\r\n    this.setState({showExpanded: false});\r\n  }\r\n\r\n  setNewValue(newValue) {\r\n    this.setState({fieldValue: newValue, showExpanded: false});\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (prevProps.id2Value !== this.props.id2Value) {\r\n      this.setState({\r\n        fieldValue: this.props.id2Value.get(this.props.field.Id),\r\n        id2Value: this.props.id2Value\r\n      });\r\n    }\r\n  }\r\n\r\n  onFieldUpdate(event) {\r\n    console.log(\r\n        `${this.props.field.Name}: Child field ${event.fieldName} has been updated. ChangeType: ${event.ChangeType}`);\r\n\r\n    if (this.props.field.Type === 'Bitmapped') {\r\n      // get the position of the field\r\n      this.props.field.Children.forEach(f => {\r\n\r\n        if (f.Name === event.fieldName) {\r\n          let currentVal = this.state.fieldValue;\r\n          let bits = Array.from(currentVal);\r\n          console.log(\"Changing bit \" + f.Position);\r\n          if (event.ChangeType === 'FieldSelected') {\r\n            bits[f.Position - 1] = '1';\r\n            if (f.Position > 64) {\r\n              bits[0] = '1';\r\n            }\r\n          } else if (event.ChangeType === 'FieldDeselected') {\r\n            bits[f.Position - 1] = '0';\r\n\r\n            //if all bits from 65 to 128 are off then turn bit 1 off\r\n            let turnOff = true;\r\n            for (let i = 65; i <= 128; i++) {\r\n              if (bits[i - 1] === '1') {\r\n                turnOff = false;\r\n                break;\r\n              }\r\n            }\r\n            if (turnOff) {\r\n              bits[0] = '0';\r\n            }\r\n\r\n          }\r\n          let newValue = bits.reduce((p = \"\", c) => p + c);\r\n          this.setState({fieldValue: newValue})\r\n\r\n        }\r\n      })\r\n    } else {\r\n\r\n      let obj = {fieldName: this.props.field.Name};\r\n      if (event.ChangeType === 'FieldSelected') {\r\n        console.log(\"setting self as selected\", this.props.field.Name);\r\n        this.setState({selected: true});\r\n        obj.ChangeType = \"FieldSelected\";\r\n      } else if (event.ChangeType === 'FieldDeselected') {\r\n        this.setState({selected: false});\r\n        obj.ChangeType = \"FieldDeselected\";\r\n      }\r\n\r\n      // for fixed and variable type field, if they have children\r\n      // the whole set of children and then let the parent know too\r\n\r\n      this.props.field.Children.forEach(c => {\r\n        if (event.ChangeType === 'FieldSelected') {\r\n          this.props.isoMsg.get(c.Id).setSelected(true);\r\n        } else if (event.ChangeType === 'FieldDeselected') {\r\n          this.props.isoMsg.get(c.Id).setSelected(false);\r\n        }\r\n      });\r\n\r\n      this.props.onFieldUpdate(obj);\r\n\r\n    }\r\n  }\r\n\r\n  setSelected(selected) {\r\n\r\n    this.setState({selected: selected});\r\n    this.props.field.Children.forEach(c => {\r\n      this.props.isoMsg.get(c.Id).setSelected(selected);\r\n    });\r\n\r\n  }\r\n\r\n  fieldSelectionChanged(event) {\r\n\r\n    let obj = {fieldName: this.props.field.Name};\r\n    let selected = false;\r\n    if (event.target.checked) {\r\n      obj.ChangeType = \"FieldSelected\";\r\n      selected = true;\r\n    } else {\r\n      obj.ChangeType = \"FieldDeselected\";\r\n    }\r\n\r\n    if (this.props.field.Type !== \"Bitmapped\") {\r\n      this.setSelected(selected);\r\n    }\r\n    this.props.onFieldUpdate(obj)\r\n  }\r\n\r\n  fieldValueChanged(event) {\r\n    this.setState({fieldValue: event.target.value});\r\n    let obj = {fieldName: this.props.field.Name, ChangeType: \"ValueChanged\"};\r\n    this.props.onFieldUpdate(obj)\r\n  }\r\n\r\n  appendFieldContent(content, field, parentField, id2Value, level) {\r\n\r\n    let key = field.Id;\r\n    if (this.props.readOnly) {\r\n      key = 'response_seg_' + field.Id;\r\n    }\r\n    content.push(<IsoField key={key} field={field} id2Value={id2Value}\r\n                           readOnly={this.props.readOnly}\r\n                           parentField={parentField} isoMsg={this.props.isoMsg}\r\n                           level={level}\r\n                           onFieldUpdate={this.onFieldUpdate}/>);\r\n  }\r\n\r\n  render() {\r\n\r\n    let selectionColumnContent;\r\n\r\n    if (this.selectable) {\r\n      selectionColumnContent =\r\n          <td align={\"center\"}><input type={\"checkbox\"}\r\n                                      checked={this.state.selected}\r\n                                      onChange={this.fieldSelectionChanged}/>\r\n          </td>\r\n    } else {\r\n      selectionColumnContent =\r\n          <td align={\"center\"}><input type={\"checkbox\"}\r\n                                      disabled={true} checked={true}\r\n                                      onChange={this.fieldSelectionChanged}/>\r\n          </td>\r\n    }\r\n\r\n    let fieldSpecColumnContent;\r\n    let positionInParent = \"\";\r\n    if (this.props.field.ParentId > 0) {\r\n      positionInParent = \"\\u2937\" + this.props.field.Position + \" \";\r\n    }\r\n\r\n    let fieldInfo = positionInParent + \" Type: \" + this.props.field.Type\r\n        + ' / ';\r\n    if (this.props.field.Type === 'Fixed') {\r\n      fieldInfo += \"Length: \" + this.props.field.FixedSize + ' / '\r\n          + 'Encoding: '\r\n          + this.props.field.DataEncoding;\r\n    } else if (this.props.field.Type === 'Variable') {\r\n      fieldInfo += \"Length Indicator: \" + this.props.field.LengthIndicatorSize\r\n          + ' / ' + 'Length Encoding: ' + this.props.field.LengthEncoding\r\n          + ' / ' + 'Data Encoding: ' + this.props.field.DataEncoding;\r\n    } else if (this.props.field.Type === 'Bitmapped') {\r\n    }\r\n\r\n    let children = [];\r\n\r\n    this.props.field.Children.forEach(\r\n        c => this.appendFieldContent(children, c, this.props.field,\r\n            this.state.id2Value, this.props.level + 1));\r\n\r\n    let levelIndicator = \"\";\r\n    for (let i = 0; i < this.props.level; i++) {\r\n      levelIndicator += '\\u2193';\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n          <tr>\r\n            {/* selection column */}\r\n            {selectionColumnContent}\r\n\r\n            {/* field name column*/}\r\n\r\n            <OverlayTrigger overlay={(\r\n                <Tooltip id=\"hi\"\r\n                         style={{fontSize: '10px'}}>{fieldInfo}</Tooltip>)}\r\n                            placement=\"top\">\r\n              <td style={{\r\n                width: \"100px\",\r\n                fontFamily: \"lato-regular\",\r\n                fontSize: \"14px\"\r\n              }}>\r\n                <span\r\n                    style={{color: 'blue'}}>{levelIndicator+' '}</span>{this.props.field.Name}\r\n              </td>\r\n            </OverlayTrigger>\r\n\r\n            {/* field specification column */}\r\n            {/*fieldSpecColumnContent*/}\r\n\r\n            {/* field value column */}\r\n            <td>\r\n              <input type=\"text\" value={this.state.fieldValue}\r\n                     style={{\r\n                       fontFamily: \"courier new\",\r\n                       backgroundColor: this.getBgColor()\r\n                     }}\r\n                     onChange={this.fieldValueChanged}\r\n                     disabled={this.props.readOnly}\r\n                     ondblclick={this.showExpanded}/>\r\n              <Button size={\"sm\"} style={{\r\n                float: 'right',\r\n                fontSize: '10px',\r\n                marginRight: '10px'\r\n              }}\r\n                      onClick={this.showExpanded}> + </Button>{' '}\r\n              <Button size={\"sm\"} style={{\r\n                float: 'right',\r\n                fontSize: '10px'\r\n              }}\r\n                      onClick={this.closeExpanded}> - </Button>\r\n\r\n            </td>\r\n\r\n          </tr>\r\n          <tr>\r\n            <td colSpan=\"3\">\r\n              <ExpandedText show={this.state.showExpanded}\r\n                            value={this.state.fieldValue}\r\n                            readOnly={this.props.readOnly}\r\n                            onClose={this.setNewValue}/>\r\n            </td>\r\n          </tr>\r\n          {children}\r\n        </React.Fragment>\r\n\r\n    );\r\n  }\r\n\r\n}","class AppProps {\r\n\r\n  constructor() {\r\n    //this.baseUrl = 'http://localhost:8080';\r\n    this.baseUrl = '';\r\n    this.sendMsgUrl = this.baseUrl + '/iso/v0/send';\r\n    this.loadMsgUrl = this.baseUrl + '/iso/v0/loadmsg';\r\n    this.allSpecsUrl = this.baseUrl + '/iso/v0/specs';\r\n    this.templateUrl = this.baseUrl + '/iso/v0/template';\r\n    this.parseTraceUrl = this.baseUrl + '/iso/v0/parse';\r\n    this.saveMsgUrl = this.baseUrl + '/iso/v0/save';\r\n  }\r\n\r\n}\r\n\r\nlet appProps = new AppProps();\r\nexport default appProps;","import React from 'react'\r\nimport axios from 'axios'\r\nimport {Button, Modal} from \"react-bootstrap\";\r\nimport appProps from \"./Properties\";\r\n\r\nexport default class SelectMessageDialog extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {show: props.show, selectedMsg: ''};\r\n    this.closeDialogSuccess = this.closeDialogSuccess.bind(this);\r\n    this.closeDialogFail = this.closeDialogFail.bind(this);\r\n    this.selectedMsgChanged = this.selectedMsgChanged.bind(this);\r\n  }\r\n\r\n  selectedMsgChanged(event) {\r\n    this.setState({selectedMsg: event.target.value});\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    //console.log(\"smd: componentDidUpdate\", this.state);\r\n    if (this.props.show === true && prevState.show === false) {\r\n\r\n      axios.get(appProps.loadMsgUrl, {\r\n        params: {\r\n          specId: this.props.specId,\r\n          msgId: this.props.msgId,\r\n        }\r\n      }).then(res => {\r\n       // console.log(res);\r\n        this.setState(\r\n            {savedMsgs: res.data, selectedMsg: res.data[0], show: true});\r\n\r\n      }).catch(e => {\r\n            //FIXME\r\n            console.log(e);\r\n            this.setState({show: true, errorMessage: e.response.data});\r\n          }\r\n      )\r\n    }\r\n  }\r\n\r\n  closeDialogSuccess() {\r\n    this.setState({show: false});\r\n    this.props.closeLoadMsgDialog(this.state.selectedMsg);\r\n  }\r\n\r\n  closeDialogFail() {\r\n    this.setState({show: false});\r\n    //TODO:: also tell the parent that we're done\r\n    //and return the value of the selected saved msg\r\n    this.props.closeLoadMsgDialog(null);\r\n  }\r\n\r\n  render() {\r\n\r\n    let content;\r\n\r\n    if (this.state.show) {\r\n      if (this.state.errorMessage) {\r\n        content = <div>{this.state.errorMessage}</div>\r\n      } else {\r\n        content =\r\n            <React.Fragment>\r\n              <label style={{fontFamily: \"lato-regular\"}}> Saved\r\n                Message </label>{'  '}\r\n              <select style={{fontFamily: \"lato-regular\", width: \"200px\"}}\r\n                      value={this.state.selectedMsg}\r\n                      onChange={this.selectedMsgChanged}>\r\n                {this.state.savedMsgs.map((sm) => {\r\n                  return <option key={sm} value={sm}>{sm}</option>\r\n                })\r\n                }\r\n              </select>\r\n            </React.Fragment>\r\n      }\r\n    }\r\n\r\n    return (\r\n        <Modal show={this.state.show}\r\n               onHide={this.closeDialogFail}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Load Saved Message</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>{content}</Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"primary\" onClick={this.closeDialogSuccess}>\r\n              OK\r\n            </Button>\r\n            <Button variant=\"secondary\" onClick={this.closeDialogFail}>\r\n              Close\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n\r\n    );\r\n  }\r\n\r\n}","import React from 'react'\r\nimport IsoField from \"./IsoField\";\r\n\r\nexport default class ResponseSegment extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      show: props.show,\r\n      data: this.props.data,\r\n      msgTemplate: this.props.msgTemplate\r\n    }\r\n  }\r\n\r\n  appendFieldContent(content, field, idToField, level) {\r\n    content.push(<IsoField key={'response_seg_' + field.Id} field={field}\r\n                           id2Value={idToField}\r\n                           readOnly={true} level={level}\r\n                           onFieldUpdate={this.onFieldUpdate}/>);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n    if ((prevProps.show === false && this.props.show === true)\r\n        || (prevState.data !== this.props.data)) {\r\n      this.setState({\r\n        show: true,\r\n        data: this.props.data,\r\n        msgTemplate: this.props.msgTemplate\r\n      })\r\n    }\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    let content = [];\r\n    if (this.state.show) {\r\n\r\n      let idToField = new Map();\r\n      this.state.data.forEach(f => {\r\n        idToField.set(f.Id, f.Value);\r\n      });\r\n\r\n      this.state.msgTemplate.Fields.map(field => {\r\n        this.appendFieldContent(content, field, idToField, 0)\r\n      });\r\n\r\n      console.log(content);\r\n\r\n      return (\r\n          <React.Fragment>\r\n            {this.props.show ?\r\n                <table border=\"0\">\r\n                  <thead>\r\n                  <tr style={{\r\n                    fontFamily: \"lato-regular\",\r\n                    backgroundColor: \"#3effba\",\r\n                    fontSize: \"15px\",\r\n                    borderBottom: 'solid',\r\n                    borderColor: 'blue'\r\n                  }}>\r\n                    <td colSpan=\"3\" align={\"center\"}>{\"Response Segment\"}</td>\r\n                  </tr>\r\n                  <tr style={{\r\n                    fontFamily: \"lato-regular\",\r\n                    backgroundColor: \"#3effba\",\r\n                    fontSize: \"14px\",\r\n                  }}>\r\n                    <td align={\"center\"}>Selection</td>\r\n                    <td align={\"center\"} style={{width: '220px'}}>Field</td>\r\n                    <td align={\"center\"} style={{width: '220px'}}>Field Data\r\n                    </td>\r\n                  </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                  {content}\r\n                  </tbody>\r\n                </table>\r\n                : null}\r\n          </React.Fragment>);\r\n\r\n    } else {\r\n      return null;\r\n    }\r\n\r\n  }\r\n}","import React from 'react'\r\nimport axios from 'axios'\r\nimport {Button, Modal} from \"react-bootstrap\";\r\nimport appProps from \"./Properties\";\r\n\r\nexport default class ParseMessageDialog extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {show: props.show, traceMsg: ''};\r\n    this.closeDialogSuccess = this.closeDialogSuccess.bind(this);\r\n    this.closeDialogFail = this.closeDialogFail.bind(this);\r\n    this.traceChanged = this.traceChanged.bind(this);\r\n  }\r\n\r\n  traceChanged(event) {\r\n    this.setState({traceMsg: event.target.value});\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    //console.log(\"smd: componentDidUpdate\", this.state);\r\n    if (this.props.show === true && prevState.show === false) {\r\n      this.setState({show: true, traceMsg: ''});\r\n    }\r\n  }\r\n\r\n  closeDialogSuccess() {\r\n    this.setState({show: false});\r\n    this.props.setTrace(this.state.traceMsg);\r\n  }\r\n\r\n  closeDialogFail() {\r\n    this.setState({show: false});\r\n    //TODO:: also tell the parent that we're done\r\n    //and return the value of the selected saved msg\r\n    this.props.setTrace(null);\r\n  }\r\n\r\n  render() {\r\n\r\n    let content;\r\n\r\n    if (this.state.show) {\r\n      if (this.state.errorMessage) {\r\n        content = <div>{this.state.errorMessage}</div>\r\n      } else {\r\n        content =\r\n            <React.Fragment>\r\n              <label\r\n                  style={{fontFamily: \"lato-regular\"}}> Trace </label>{'  '}\r\n\r\n              <textarea key={\"trace_input\"} value={this.state.traceMsg}\r\n                        onChange={this.traceChanged}\r\n                        style={{fontFamily: \"courier new\", width: '100%'}}/>\r\n\r\n\r\n            </React.Fragment>\r\n      }\r\n    }\r\n\r\n    return (\r\n\r\n        <Modal show={this.state.show}\r\n               onHide={this.closeDialogFail}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Parse Trace</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>{content}</Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"primary\" onClick={this.closeDialogSuccess}>\r\n              OK\r\n            </Button>\r\n            <Button variant=\"secondary\" onClick={this.closeDialogFail}>\r\n              Close\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n\r\n    );\r\n  }\r\n\r\n}","import React from 'react'\r\nimport axios from 'axios'\r\nimport {Button, Modal} from \"react-bootstrap\";\r\nimport appProps from \"./Properties\";\r\n\r\nexport default class SaveMessageDialog extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {show: props.show, msgName: ''};\r\n    this.closeDialogSuccess = this.closeDialogSuccess.bind(this);\r\n    this.closeDialogFail = this.closeDialogFail.bind(this);\r\n    this.msgNameChanged = this.msgNameChanged.bind(this);\r\n  }\r\n\r\n  msgNameChanged(event) {\r\n    this.setState({errorMessage: '', msgName: event.target.value});\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (this.props.show === true && prevState.show === false) {\r\n\r\n      this.setState(\r\n          {show: true, msgName: this.props.msgName});\r\n\r\n    }\r\n  }\r\n\r\n  closeDialogSuccess() {\r\n\r\n    if (!this.state.msgName || this.state.msgName === \"\" || !this.props.data) {\r\n      this.setState({errorMessage: 'Please specify a message!'});\r\n      return;\r\n    }\r\n\r\n    let postData = 'specId=' + this.props.specId + '&msgId=' + this.props.msgId\r\n        + '&dataSetName=' + this.state.msgName + '&msg=' + JSON.stringify(\r\n            this.props.data);\r\n   // console.log(postData);\r\n    axios.post(appProps.saveMsgUrl, postData).then(res => {\r\n      console.log(res);\r\n      this.props.msgSaveSuccess(this.state.msgName);\r\n      this.setState({show: false});\r\n\r\n    }).catch(e => {\r\n          this.props.msgSaveFailed(e);\r\n          this.setState({show: false});\r\n        }\r\n    );\r\n\r\n  }\r\n\r\n  closeDialogFail() {\r\n    this.props.msgSaveCancelled();\r\n    this.setState({show: false});\r\n  }\r\n\r\n  render() {\r\n\r\n    let content, errorContent;\r\n\r\n    if (this.state.show) {\r\n\r\n      console.log(\"before sending\", this.props);\r\n\r\n      if (this.state.errorMessage) {\r\n        errorContent =\r\n            <div style={{color: 'red'}}>{this.state.errorMessage}</div>\r\n      }\r\n\r\n      if (!this.props.msgId || !this.props.specId) {\r\n        content =\r\n            <div>{\"Error: Please load a spec/msg, set data before attempting to save\"}</div>\r\n      } else {\r\n        content =\r\n            <React.Fragment>\r\n              <label style={{fontFamily: \"lato-regular\"}}> Message\r\n                Name </label>{'  '}\r\n              <input type={\"text\"} key={\"msg_name_save\"}\r\n                     value={this.state.msgName} onChange={this.msgNameChanged}/>\r\n              {errorContent}\r\n            </React.Fragment>\r\n      }\r\n    }\r\n\r\n    return (\r\n        <Modal show={this.state.show}\r\n               onHide={this.closeDialogFail}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Save Message</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>{content}</Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"primary\" onClick={this.closeDialogSuccess}>\r\n              OK\r\n            </Button>\r\n            <Button variant=\"secondary\" onClick={this.closeDialogFail}>\r\n              Close\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n\r\n    );\r\n  }\r\n\r\n}","class FieldValidator {\r\n\r\n  constructor(props) {\r\n    this.validate = this.validate.bind(this);\r\n  }\r\n\r\n  validate(field, fieldData, errors) {\r\n\r\n    console.log(\"validate\", field, fieldData, errors);\r\n    let validationFailed = false;\r\n\r\n    if (field.Type === \"Fixed\") {\r\n\r\n      if (field.DataEncoding === 'ASCII' || field.DataEncoding === 'EBCDIC') {\r\n        if (fieldData.length !== field.FixedSize) {\r\n          errors.push(\r\n              `\\u2b55 \"${field.Name}\" should have a fixed size of ${field.FixedSize} but has ${fieldData.length}`);\r\n          validationFailed = true;\r\n        }\r\n      } else {\r\n        if (fieldData.length !== 2 * field.FixedSize) {\r\n          errors.push(\r\n              `\\u2b55 \"${field.Name}\" should have a fixed size of ${field.FixedSize} but has ${fieldData.length\r\n              / 2}`);\r\n          validationFailed = true;\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n    if (field.DataEncoding === 'BCD' || field.DataEncoding === 'BINARY') {\r\n      if (fieldData.length % 2 !== 0) {\r\n        errors.push(\r\n            `\\u2b55 \"${field.Name}\" should have even number of characters!`);\r\n        validationFailed = true;\r\n      }\r\n\r\n      if (field.DataEncoding === 'BINARY' && !fieldData.match(\r\n          \"^[0-9,a-f,A-F]+$\")) {\r\n        errors.push(`\\u2b55 \"${field.Name}\" supports only hex i.e 0-9,a-z,A-Z`);\r\n        validationFailed = true;\r\n      }\r\n      if (field.DataEncoding === 'BCD' && !fieldData.match(\"^[0-9]+$\")) {\r\n        errors.push(`\\u2b55 \"${field.Name}\" supports only bcd i.e 0-9`);\r\n        validationFailed = true;\r\n      }\r\n\r\n    }\r\n\r\n    //TODO:: other checks like content etc\r\n    return validationFailed;\r\n\r\n  }\r\n\r\n}\r\n\r\nlet fieldValidator = new FieldValidator();\r\nexport default fieldValidator;","import React from 'react';\r\nimport axios from \"axios\";\r\n//import axios from 'axios'\r\nimport IsoField from './IsoField.js'\r\nimport SelectMessageDialog from './SelectMessageDialog.js'\r\nimport {Button, Modal} from 'react-bootstrap';\r\nimport appProps from './Properties.js'\r\nimport ResponseSegment from \"./ResponseSegment\";\r\nimport ParseMessageDialog from \"./ParseMessageDialog\";\r\nimport SaveMessageDialog from \"./SaveMessageDialog\";\r\nimport fieldValidator from './FieldValidator'\r\n\r\nexport default class MessageStructure extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    console.log(this.props);\r\n    console.log(\"$msg_structure$\", this.props.specs, this.props.spec,\r\n        this.props.msg);\r\n\r\n    this.state = {\r\n      msgTemplate: null,\r\n      loaded: false,\r\n      spec: props.spec,\r\n      msg: props.msg,\r\n      shouldShow: props.showMsgTemplate,\r\n      targetServerIp: '127.0.0.1',\r\n      targetServerPort: '6666',\r\n      mliType: \"2I\",\r\n      currentDataSet: '',\r\n      errDialogVisible: false,\r\n      errorMessage: '',\r\n      showLoadMessagesDialog: false,\r\n      showTraceInputDialog: false,\r\n      showSaveMsgDialog: false,\r\n      showResponse: false,\r\n      responseData: null\r\n    };\r\n\r\n    this.onFieldUpdate = this.onFieldUpdate.bind(this);\r\n    this.appendFieldContent = this.appendFieldContent.bind(this);\r\n    this.sendToHost = this.sendToHost.bind(this);\r\n    this.addFieldContent = this.addFieldContent.bind(this);\r\n    this.serverIpChanged = this.serverIpChanged.bind(this);\r\n    this.serverPortChanged = this.serverPortChanged.bind(this);\r\n    this.mliTypeChanged = this.mliTypeChanged.bind(this);\r\n    this.showErrorDialog = this.showErrorDialog.bind(this);\r\n    this.closeErrorDialog = this.closeErrorDialog.bind(this);\r\n    this.processError = this.processError.bind(this);\r\n    this.showLoadMessagesDialog = this.showLoadMessagesDialog.bind(this);\r\n    this.closeLoadMsgDialog = this.closeLoadMsgDialog.bind(this);\r\n    this.showUnImplementedError = this.showUnImplementedError.bind(this);\r\n    this.setTrace = this.setTrace.bind(this);\r\n    this.showTraceInputsDialog = this.showTraceInputsDialog.bind(this);\r\n    this.showSaveMsgDialog = this.showSaveMsgDialog.bind(this);\r\n\r\n    this.msgSaveSuccess = this.msgSaveSuccess.bind(this);\r\n    this.msgSaveFailed = this.msgSaveFailed.bind(this);\r\n    this.msgSaveCancelled = this.msgSaveCancelled.bind(this);\r\n    this.showInfoDialog = this.showInfoDialog.bind(this);\r\n\r\n  }\r\n\r\n  // Receives the trace as a callback from ParseMessageDialog component\r\n  setTrace(trace) {\r\n    if (trace != null) {\r\n      console.log(\"trace  = \", trace);\r\n      // now parse this via a API call\r\n\r\n      axios.post(appProps.parseTraceUrl + '/' + this.state.spec.Id + '/'\r\n          + this.state.msg.Id, trace).then(res => {\r\n            console.log(\"parsed msg data\", res.data);\r\n            res.data.forEach(fd => {\r\n              let fieldComponent = this.state.isoMsg.get(fd.Id);\r\n              fieldComponent.setState({selected: true, fieldValue: fd.Value});\r\n            });\r\n          }\r\n      ).catch(e => {\r\n            console.log(e);\r\n            this.processError(e)\r\n          }\r\n      )\r\n\r\n    }\r\n    this.setState({showTraceInputDialog: false})\r\n  }\r\n\r\n  showUnImplementedError() {\r\n    this.setState({\r\n      errorMessage: 'This functionality has not been implemented. Please try the old version of application.',\r\n      errDialogVisible: true\r\n    })\r\n  }\r\n\r\n  closeLoadMsgDialog(selectedMsg) {\r\n    this.setState({showLoadMessagesDialog: false, currentDataSet: selectedMsg});\r\n    console.log(\"selected msg = \", selectedMsg);\r\n\r\n    if (selectedMsg != null) {\r\n      axios.get(appProps.loadMsgUrl, {\r\n        params: {\r\n          specId: this.state.spec.Id,\r\n          msgId: this.state.msg.Id,\r\n          dsName: selectedMsg\r\n        }\r\n      }).then(res => {\r\n            //console.log(\"saved msg data\", res.data);\r\n            res.data.forEach(fd => {\r\n              let fieldComponent = this.state.isoMsg.get(fd.Id);\r\n              fieldComponent.setState({selected: true, fieldValue: fd.Value});\r\n            });\r\n          }\r\n      ).catch(e => {\r\n            console.log(e);\r\n            this.processError(e)\r\n          }\r\n      )\r\n    }\r\n\r\n  }\r\n\r\n  showInfoDialog(msg) {\r\n    this.setState({errDialogVisible: true, errorMessage: msg})\r\n  }\r\n\r\n  msgSaveSuccess(msgName) {\r\n    this.showInfoDialog(`Message ${msgName} saved successfully.`);\r\n    this.setState({showSaveMsgDialog: false});\r\n  }\r\n\r\n  msgSaveFailed(e) {\r\n    this.processError(e);\r\n    this.setState({showSaveMsgDialog: false});\r\n  }\r\n\r\n  msgSaveCancelled() {\r\n    this.setState({showSaveMsgDialog: false});\r\n  }\r\n\r\n  showSaveMsgDialog() {\r\n\r\n    // build the data and then\r\n    let content = [];\r\n    this.state.msgTemplate.Fields.forEach(f => {\r\n      this.addFieldContent(f, content);\r\n    });\r\n    this.setState({saveData: content, showSaveMsgDialog: true})\r\n  }\r\n\r\n  showTraceInputsDialog() {\r\n    this.setState({showTraceInputDialog: true})\r\n  }\r\n\r\n  showLoadMessagesDialog() {\r\n    this.setState({showLoadMessagesDialog: true})\r\n  }\r\n\r\n  closeErrorDialog() {\r\n    this.setState({errDialogVisible: false})\r\n  }\r\n\r\n  showErrorDialog() {\r\n    this.setState({errDialogVisible: true});\r\n  }\r\n\r\n  mliTypeChanged(e) {\r\n    this.setState({mliType: e.target.value});\r\n  }\r\n\r\n  serverIpChanged(e) {\r\n    this.setState({targetServerIp: e.target.value});\r\n  }\r\n\r\n  serverPortChanged(e) {\r\n    this.setState({targetServerPort: e.target.value});\r\n  }\r\n\r\n  addFieldContent(field, content, validationErrors) {\r\n\r\n    let fData = this.state.isoMsg.get(field.Id);\r\n    if (fData.state.selected) {\r\n      if (fieldValidator.validate(field, fData.state.fieldValue,\r\n          validationErrors)) {\r\n        fData.setError(true);\r\n      } else {\r\n        fData.setError(false);\r\n      }\r\n      content.push({Id: field.Id, Value: fData.state.fieldValue});\r\n    }\r\n\r\n    field.Children.forEach(cf => {\r\n      if (fData.state.selected) {\r\n        this.addFieldContent(cf, content, validationErrors);\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  //sends the message (as JSON) to the API server to be sent to the ISO host\r\n  sendToHost() {\r\n\r\n    let content = [];\r\n    let validationErrors = [];\r\n    this.state.msgTemplate.Fields.forEach(f => {\r\n      this.addFieldContent(f, content, validationErrors);\r\n    });\r\n    //console.log(\"After gathering data = \", content, validationErrors);\r\n\r\n    if (validationErrors.length > 0) {\r\n      let errMsg = \"\";\r\n      validationErrors.forEach(e => errMsg += e + \"\\n\");\r\n      this.setState({errorMessage: errMsg});\r\n      this.showErrorDialog();\r\n      return\r\n    }\r\n\r\n    //lets not hide and then show the response segment again\r\n    this.setState({showResponse: false, responseData: []});\r\n\r\n    let postData = 'host=' +\r\n        this.state.targetServerIp + '&' + 'port=' + this.state.targetServerPort\r\n        + '&' + 'mli=' + this.state.mliType\r\n        + '&' + 'specId=' + this.state.spec.Id + \"&\" + 'msgId='\r\n        + this.state.msg.Id + \"&\"\r\n        + \"msg=\"\r\n        + JSON.stringify(content);\r\n    axios.post(appProps.sendMsgUrl, postData).then(res => {\r\n      console.log(\"Response from server\", res);\r\n      this.setState({showResponse: true, responseData: res.data});\r\n\r\n    }).catch(\r\n        e => {\r\n          console.log(\"error = \", e);\r\n          this.processError(e)\r\n        })\r\n\r\n  }\r\n\r\n  processError(e) {\r\n\r\n    if (!e.response) {\r\n      console.log(e);\r\n      this.setState({\r\n        errorMessage: 'Error: Unable to reach API server',\r\n        errDialogVisible: true\r\n      });\r\n      return\r\n    }\r\n\r\n    if (e.response.status === 400) {\r\n      this.setState(\r\n          {errorMessage: e.response.data, errDialogVisible: true});\r\n    } else {\r\n      this.setState(\r\n          {\r\n            errorMessage: 'Unexpected error from server - '\r\n                + e.response.status, errDialogVisible: true\r\n          });\r\n    }\r\n  }\r\n\r\n  onFieldUpdate(e) {\r\n    console.log(\"field updated =>\" + e.fieldName)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getMessageTemplate(this.props.spec, this.props.msg)\r\n  }\r\n\r\n  getMessageTemplate(pSpec, pMsg) {\r\n    let spec = this.props.specs.find(s => {\r\n      if (s.Name === pSpec) {\r\n        return s;\r\n      }\r\n      return null;\r\n    });\r\n    let msg = spec.Messages.find(m => {\r\n      if (m.Name === pMsg) {\r\n        return m;\r\n      }\r\n\r\n      return null;\r\n    });\r\n\r\n    let url = appProps.templateUrl + '/' + spec.Id + \"/\" + msg.Id;\r\n    console.log(url);\r\n    axios.get(url).then(\r\n        res => {\r\n          console.log(res.data);\r\n          let isoMsg = new Map();\r\n          isoMsg.set(\"msg_template\", res.data);\r\n          this.setState(\r\n              {\r\n                spec: spec,\r\n                msg: msg,\r\n                msgTemplate: res.data,\r\n                loaded: true,\r\n                isoMsg: isoMsg\r\n              });\r\n\r\n          console.log(\"MsgTemplate = \", this.state.msgTemplate);\r\n        }).catch(\r\n        err => this.setState({errorMessage: err, errDialogVisible: true}))\r\n  }\r\n\r\n  appendFieldContent(content, field, isoMsg, level) {\r\n    content.push(<IsoField key={field.Id} field={field} isoMsg={isoMsg}\r\n                           level={level}\r\n                           onFieldUpdate={this.onFieldUpdate}/>);\r\n  }\r\n\r\n  render() {\r\n\r\n    let content = [];\r\n    if (this.state.loaded === true) {\r\n      this.state.msgTemplate.Fields.map(field => {\r\n        this.appendFieldContent(content, field, this.state.isoMsg, 0)\r\n      })\r\n    }\r\n\r\n    return (\r\n\r\n        <div style={{\r\n          fontFamily: 'lato-regular',\r\n          fontSize: '12px',\r\n          alignContent: 'center',\r\n          alignSelf: 'center',\r\n          fill: 'aqua'\r\n        }}>\r\n\r\n          <Modal show={this.state.errDialogVisible}\r\n                 onHide={this.closeErrorDialog}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Error</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body><pre style={{\r\n              font: \"Lato\",\r\n              fontSize: \"14px\"\r\n            }}>{this.state.errorMessage}</pre>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button variant=\"secondary\" onClick={this.closeErrorDialog}>\r\n                Close\r\n              </Button>\r\n            </Modal.Footer>\r\n          </Modal>\r\n\r\n          <SelectMessageDialog show={this.state.showLoadMessagesDialog}\r\n                               specId={this.state.spec.Id}\r\n                               msgId={this.state.msg.Id}\r\n                               closeLoadMsgDialog={this.closeLoadMsgDialog}/>\r\n\r\n          <ParseMessageDialog show={this.state.showTraceInputDialog}\r\n                              setTrace={this.setTrace}/>\r\n\r\n          <SaveMessageDialog show={this.state.showSaveMsgDialog}\r\n                             msgId={this.state.msg.Id}\r\n                             specId={this.state.spec.Id}\r\n                             data={this.state.saveData}\r\n                             msgName={this.state.currentDataSet}\r\n                             msgSaveSuccess={this.msgSaveSuccess}\r\n                             msgSaveFailed={this.msgSaveFailed}\r\n                             msgSaveCancelled={this.msgSaveCancelled}/>\r\n\r\n          <div\r\n              style={{\r\n                height: \"100px\",\r\n                verticalAlign: \"baseline\",\r\n                alignItems: \"center\",\r\n                margin: \"10px\"\r\n              }}>\r\n\r\n\r\n            <table\r\n                style={{\r\n                  fontFamily: 'lato-regular',\r\n                  fontSize: '14px',\r\n                  alignSelf: 'center',\r\n                  borderBottom: 'solid',\r\n                  backgroundColor: '#4cffff'\r\n                }}>\r\n              <tr>\r\n                <td><label style={{width: '60px'}}>Server Ip </label>{'   '}\r\n                  <input type=\"text\" value={this.state.targetServerIp}\r\n                         onChange={this.serverIpChanged}/></td>\r\n                <td><label style={{width: '80px'}}>Server Port </label>\r\n                  <input type=\"text\" value={this.state.targetServerPort}\r\n                         onChange={this.serverPortChanged}/></td>\r\n                <td><label style={{width: '70px'}}>MLI Type </label>\r\n\r\n                  <select value={this.state.mliType}\r\n                          onChange={this.mliTypeChanged}>\r\n                    <option key={\"2i\"} value={\"2I\"}>2I</option>\r\n                    <option key={\"2e\"} value={\"2E\"}>2E</option>\r\n                  </select></td>\r\n              </tr>\r\n            </table>\r\n\r\n            <table>\r\n\r\n              <tr>\r\n                <td>\r\n\r\n                </td>\r\n              </tr>\r\n\r\n\r\n              <tr>\r\n                <td>\r\n                  <Button size={\"sm\"} onClick={this.showTraceInputsDialog}>Parse\r\n                    Raw</Button>{' '}\r\n                  <Button size={\"sm\"} onClick={this.showLoadMessagesDialog}>Load\r\n                    Message</Button>{' '}\r\n                  <Button size={\"sm\"} onClick={this.showSaveMsgDialog}>Save\r\n                    Message</Button>{' '}\r\n                  <Button size={\"sm\"} onClick={this.sendToHost}>Send</Button>\r\n\r\n\r\n                </td>\r\n              </tr>\r\n\r\n\r\n            </table>\r\n          </div>\r\n\r\n          <div style={{align: \"center\", width: \"70%\"}}>\r\n\r\n            <div style={{float: \"left\"}}>\r\n              <table border=\"0\">\r\n                <thead>\r\n                <tr style={{\r\n                  fontFamily: \"lato-regular\",\r\n                  backgroundColor: \"#ff8f5b\",\r\n                  fontSize: \"15px\",\r\n                  borderBottom: 'solid',\r\n                  borderColor: 'blue'\r\n                }}>\r\n                  <td colspan=\"3\" align={\"center\"}>{\"Request Segment\"}</td>\r\n                </tr>\r\n                <tr style={{\r\n                  fontFamily: \"lato-regular\",\r\n                  backgroundColor: \"#ff8f5b\",\r\n                  fontSize: \"14px\",\r\n                }}>\r\n                  <td align={\"center\"}>Selection</td>\r\n                  <td align={\"center\"} style={{width: '220px'}}> Field</td>\r\n                  <td align={\"center\"} style={{width: '220px'}}>Field Data\r\n                  </td>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {content}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n\r\n            <div style={{float: \"right\"}}>\r\n              <ResponseSegment show={this.state.showResponse}\r\n                               data={this.state.responseData}\r\n                               msgTemplate={this.state.msgTemplate}/>\r\n            </div>\r\n          </div>\r\n\r\n          <div style={{height: \"10px\"}}>{' '}</div>\r\n\r\n        </div>\r\n\r\n    );\r\n\r\n  }\r\n\r\n}","import React from 'react';\r\nimport axios from 'axios'\r\nimport MessageStructure from './MessageStructure.js'\r\nimport {Button, Modal} from \"react-bootstrap\";\r\nimport appProps from \"./Properties\";\r\n\r\nclass NavBar extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      specs: [],\r\n      currentSpec: \"Select\",\r\n      currentSpecMsg: \"\",\r\n      showMsgTemplate: false,\r\n      loaded: false,\r\n      errDialogVisible: false,\r\n      errorMessage: ''\r\n    };\r\n    this.specChanged = this.specChanged.bind(this);\r\n    this.messageChanged = this.messageChanged.bind(this);\r\n    this.msgTemplateRef = React.createRef();\r\n\r\n  }\r\n\r\n  closeErrorDialog() {\r\n    this.setState({errDialogVisible: false})\r\n  }\r\n\r\n  showErrorDialog() {\r\n    this.setState({errDialogVisible: true});\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    axios.get(appProps.allSpecsUrl).then(res => {\r\n      console.log(res.data);\r\n      this.setState({specs: res.data, loaded: true});\r\n    }).catch(\r\n        err => console.log(err))\r\n  }\r\n\r\n  render() {\r\n\r\n    let msg;\r\n    let spec;\r\n\r\n    if (this.state.loaded === true) {\r\n      spec = this.getCurrentSpec();\r\n      if (spec == null) {\r\n        spec = this.state.specs[0];\r\n      }\r\n\r\n      if (!this.state.currentSpecMsg) {\r\n        msg = spec.Messages[0].Name;\r\n      } else {\r\n        msg = this.state.currentSpecMsg;\r\n      }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n          <Modal show={this.state.errDialogVisible}\r\n                 onHide={this.closeErrorDialog}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Error</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>{this.state.errorMessage}</Modal.Body>\r\n            <Modal.Footer>\r\n              <Button variant=\"secondary\" onClick={this.closeErrorDialog}>\r\n                Close\r\n              </Button>\r\n            </Modal.Footer>\r\n          </Modal>\r\n\r\n          <div align=\"center\"\r\n               style={{\r\n                 verticalAlign: \"baseline\",\r\n                 backgroundColor: \"#ffbe00\",\r\n                 height: \"80px\"\r\n               }}>\r\n\r\n            <table style={{\r\n              fontFamily: 'lato-regular',\r\n              fontSize: '16px',\r\n              left: '50%',\r\n              top: '50%',\r\n            }}>\r\n\r\n              <tbody>\r\n              <tr>\r\n                <td>Message Specification</td>\r\n                <td style={{width: \"100px\"}}/>\r\n                <td>{this.specsDropDown()}</td>\r\n              </tr>\r\n\r\n              <tr>\r\n                <td>Message</td>\r\n                <td style={{width: \"100px\"}}/>\r\n                <td>{this.messagesDropDown()}</td>\r\n              </tr>\r\n              </tbody>\r\n            </table>\r\n\r\n          </div>\r\n          <div align=\"center\">\r\n            {\r\n              this.state.loaded && this.state.currentSpec !== \"Select\" ?\r\n                  <MessageStructure key={this.state.currentSpec + \"_\" + msg}\r\n                                    ref={this.msgTemplateRef}\r\n                                    specs={this.state.specs}\r\n                                    spec={this.state.currentSpec}\r\n                                    msg={msg}/>\r\n                  : null\r\n            }\r\n          </div>\r\n        </React.Fragment>\r\n\r\n    );\r\n  }\r\n\r\n  specChanged(event) {\r\n\r\n    this.setState({\r\n      currentSpec: event.target.value,\r\n      currentSpecMsg: \"\"\r\n    });\r\n\r\n    console.log(event.target.value);\r\n    if (this.state.loaded && event.target.value !== \"Select\") {\r\n      console.log(\"calling update - specChanged\");\r\n      let spec = this.getSpecByName(event.target.value);\r\n    }\r\n  }\r\n\r\n  messageChanged(event) {\r\n    this.setState({currentSpecMsg: event.target.value});\r\n\r\n    if (this.state.loaded && this.state.currentSpec !== \"Select\") {\r\n      console.log(\"calling update - msgChanged\");\r\n\r\n    }\r\n  }\r\n\r\n  // builds a combo box for specifications\r\n  specsDropDown() {\r\n    return (\r\n        <select style={{fontFamily: \"lato-regular\", width: \"200px\",}}\r\n                onChange={this.specChanged}>\r\n          <option key={\"Select\"} value={\"Select\"}>Select</option>\r\n          {\r\n            this.state.specs.map((s) => {\r\n              return <option key={s.Name} value={s.Name}>{s.Name}</option>\r\n            })\r\n          }\r\n\r\n        </select>);\r\n  }\r\n\r\n  // builds and returns a combo box for messages for the current spec\r\n  messagesDropDown() {\r\n\r\n    let spec;\r\n\r\n    if (this.state.loaded) {\r\n      spec = this.getCurrentSpec();\r\n    }\r\n\r\n    // no spec loaded\r\n    if (this.state.currentSpec === \"Select\") {\r\n      return (<select/>);\r\n    } else {\r\n\r\n      return (\r\n\r\n          <select value={this.state.currentSpecMsg}\r\n                  style={{fontFamily: \"lato-regular\", width: \"150px\"}}\r\n                  onChange={this.messageChanged}>\r\n            {\r\n              spec.Messages.map(msg => {\r\n                return <option key={msg.Id}\r\n                               value={msg.Name}>{msg.Name}</option>\r\n              })\r\n            }\r\n\r\n          </select>\r\n\r\n      )\r\n\r\n    }\r\n\r\n  }\r\n\r\n  // returns the currently loaded spec (if there is one) else null\r\n  getCurrentSpec() {\r\n    return this.state.specs.find((s, i) => {\r\n      if (s.Name === this.state.currentSpec) {\r\n        return s;\r\n      }\r\n      return null;\r\n    });\r\n  }\r\n\r\n  // returns specification given its name\r\n  getSpecByName(name) {\r\n    return this.state.specs.find((s, i) => {\r\n      if (s.Name === name) {\r\n        return s;\r\n      }\r\n      return null;\r\n    });\r\n  }\r\n\r\n}\r\n\r\nexport default NavBar","import React from 'react';\nimport './App.css';\nimport NavBar from './NavBar.js'\n\nfunction App() {\n  return (\n      <div style={{backgroundColor:'#fbfff0'}}>\n        <h1 style={{fontFamily: \"shadows-into-light\"}}>ISO WebSim - ISO8583 Web\n          Simulator</h1>\n        <a style={{fontFamily: 'lato-regular', fontSize: '12px'}}\n           href={\"/iso/home\"} target={\"_blank\"}>[Non React App]</a>\n        <a style={{fontFamily: 'lato-regular', fontSize: '12px'}}\n          href={\"/iso/v0/server\"} target={\"_blank\"}>[Manage Servers]</a>\n\n        <div className=\"App\">\n          <NavBar/>\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n//ReactDOM.render(<NavBar />, document.getElementById('nav_bar'));\nReactDOM.render(<App style={{backgroundColor:'blue'}}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}