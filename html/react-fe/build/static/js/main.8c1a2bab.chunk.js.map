{"version":3,"sources":["components/Utils/ExpandedText.js","components/Utils/Properties.js","components/Utils/FieldValidator.js","components/Iso/IsoField/IsoField.js","components/Dialogs/SelectMessageDialog.js","components/Iso/ResponseSegment.js","components/Dialogs/ParseMessageDialog.js","components/Dialogs/SaveMessageDialog.js","components/Utils/NetworkSettings.js","components/Iso/MessageStructure.js","components/Navigation/SpecTree/SpecTree.js","components/Navigation/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["ExpandedText","props","state","show","value","closeThis","bind","valueChanged","event","this","setState","target","onClose","prevProps","prevState","snapshot","Fragment","style","borderBottom","borderColor","fontFamily","width","minHeight","maxHeight","onChange","disabled","readOnly","height","Button","size","float","fontSize","onClick","React","Component","AppProps","baseUrl","sendMsgUrl","loadMsgUrl","allSpecsUrl","templateUrl","parseTraceUrl","saveMsgUrl","FixedField","VariableField","BitmappedField","appProps","fieldValidator","validate","field","fieldData","errors","console","log","validationFailed","Type","DataEncoding","length","FixedSize","push","Name","dataErr","match","fieldLen","MinSize","MaxSize","IsoField","fieldValueChanged","fieldSelectionChanged","onFieldUpdate","appendFieldContent","setSelected","setNewValue","showExpanded","closeExpanded","getBgColor","setError","selectable","selected","fieldValue","id2Value","get","Id","bgColor","hasError","defaultFieldValue","includes","Array","fill","reduce","p","c","isoMsg","set","newValue","fieldName","ChangeType","Children","forEach","f","currentVal","bits","from","Position","turnOff","i","obj","checked","errMsg","content","parentField","level","key","selectionColumnContent","align","Checkbox","type","color","positionInParent","ParentId","fieldInfo","LengthIndicatorSize","LengthEncoding","children","levelIndicator","OverlayTrigger","overlay","Tooltip","id","placement","InputLabel","TextField","margin","error","helperText","ondblclick","marginRight","colSpan","SelectMessageDialog","selectedMsg","closeDialogSuccess","closeDialogFail","selectedMsgChanged","axios","params","specId","msgId","then","res","savedMsgs","data","catch","e","errorMessage","response","closeLoadMsgDialog","map","sm","Modal","onHide","Header","closeButton","Title","Body","Footer","variant","ResponseSegment","msgTemplate","idToField","Map","Value","Fields","Paper","border","backgroundColor","ParseMessageDialog","traceMsg","traceChanged","setTrace","SaveMessageDialog","msgName","msgNameChanged","postData","JSON","stringify","post","msgSaveSuccess","msgSaveFailed","msgSaveCancelled","errorContent","NetworkSettings","targetServerIp","targetServerPort","mliType","serverIpChanged","serverPortChanged","mliTypeChanged","verticalAlign","label","defaultValue","select","MenuItem","MessageStructure","specs","spec","msg","loaded","shouldShow","showMsgTemplate","currentDataSet","errDialogVisible","showLoadMessagesDialog","showTraceInputDialog","showSaveMsgDialog","showResponse","responseData","reqMenuVisible","selectedReqMenuItem","sendToHost","addFieldContent","showErrorDialog","closeErrorDialog","processError","showUnImplementedError","showTraceInputsDialog","showInfoDialog","hideResponseSegment","showMenu","hideMenu","handleMenuClick","showResponseDialog","getTemplateLabel","networkSettingsChanged","ip","port","currentTarget","alert","trace","fd","dsName","saveData","validationErrors","fData","cf","status","getMessageTemplate","pSpec","pMsg","find","s","Messages","m","url","err","font","display","ButtonGroup","fullWidth","variation","marginTop","IconButton","aria-label","aria-controls","aria-haspopup","Menu","anchorEl","getContentAnchorEl","keepMounted","open","TransitionComponent","Fade","dense","Dialog","scroll","PaperComponent","aria-labelledby","maxWidth","disableBackdropClick","DialogTitle","cursor","DialogContent","dividers","DialogActions","handle","cancel","SpecTree","messageClicked","parentElement","getAttribute","msgSelected","TreeItem","nodeId","sid","mid","icon","Folder","buildMessages","treeContent","Home","TreeView","defaultExpanded","defaultCollapseIcon","defaultExpandIcon","defaultParentIcon","defaultEndIcon","Message","NavBar","currentSpec","currentSpecMsg","specChanged","messageChanged","getSpecByID","msgTemplateRef","createRef","parseInt","getCurrentSpec","marginLeft","ref","getSpecByName","name","App","href","className","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8c1a2bab.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Button} from \"react-bootstrap\";\r\n\r\n// ExpandedText shows a field value within a large field (TextArea)\r\n// and is useful when editing fields with large values\r\nexport default class ExpandedText extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {show: this.props.show, value: this.props.value};\r\n    this.closeThis = this.closeThis.bind(this);\r\n    this.valueChanged = this.valueChanged.bind(this);\r\n  }\r\n\r\n  valueChanged(event) {\r\n    this.setState({value: event.target.value});\r\n  }\r\n\r\n  closeThis() {\r\n    this.setState({show: true});\r\n    this.props.onClose(this.state.value);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (prevProps.show === false && this.props.show === true && this.state.show\r\n        === false) {\r\n      this.setState({show: true, value: this.props.value})\r\n    } else if (this.props.show === false && this.state.show\r\n        === true) {\r\n      this.setState({show: false, value: this.props.value})\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n\r\n        (this.state.show === true) ?\r\n\r\n            <React.Fragment>\r\n              <div style={{borderBottom: 'solid', borderColor: 'red'}}>\r\n\r\n        <textarea\r\n            style={{\r\n              fontFamily: \"courier new\",\r\n              width: '100%',\r\n              minHeight: '80px',\r\n              maxHeight: '200px'\r\n            }}\r\n            onChange={this.valueChanged} disabled={this.props.readOnly} value={this.state.value}/>\r\n\r\n                <div style={{height: '25px'}}>\r\n                  <Button size={\"sm\"} style={{\r\n                    float: 'right', fontSize: '10px'\r\n                  }} onClick={this.closeThis}> OK </Button>\r\n                </div>\r\n              </div>\r\n            </React.Fragment>\r\n            :\r\n            null\r\n    );\r\n  }\r\n\r\n}","// AppProps are various URL's that are used by axios\r\nexport class AppProps {\r\n\r\n  static FixedField = \"Fixed\";\r\n  static VariableField = \"Variable\";\r\n  static BitmappedField = \"Bitmapped\";\r\n\r\n  constructor() {\r\n    //this.baseUrl = 'http://localhost:8080';\r\n    this.baseUrl = '';\r\n    this.sendMsgUrl = this.baseUrl + '/iso/v0/send';\r\n    this.loadMsgUrl = this.baseUrl + '/iso/v0/loadmsg';\r\n    this.allSpecsUrl = this.baseUrl + '/iso/v0/specs';\r\n    this.templateUrl = this.baseUrl + '/iso/v0/template';\r\n    this.parseTraceUrl = this.baseUrl + '/iso/v0/parse';\r\n    this.saveMsgUrl = this.baseUrl + '/iso/v0/save';\r\n  }\r\n\r\n}\r\n\r\nlet appProps = new AppProps();\r\nexport default appProps;","\r\n// FieldValidator provides validation logic for field values\r\nimport {AppProps} from \"./Properties\";\r\n\r\nclass FieldValidator {\r\n\r\n  constructor(props) {\r\n    this.validate = this.validate.bind(this);\r\n  }\r\n\r\n  validate(field, fieldData, errors) {\r\n\r\n    console.log(\"validate\", field, fieldData, errors);\r\n    let validationFailed = false;\r\n\r\n    if (field.Type === AppProps.FixedField) {\r\n\r\n      if (field.DataEncoding === 'ASCII' || field.DataEncoding === 'EBCDIC') {\r\n        if (fieldData.length !== field.FixedSize) {\r\n          errors.push(\r\n              `\\u2b55 \"${field.Name}\" should have a fixed size of ${field.FixedSize} but has ${fieldData.length}`);\r\n          validationFailed = true;\r\n        }\r\n      } else {\r\n        if (fieldData.length !== 2 * field.FixedSize) {\r\n          errors.push(\r\n              `\\u2b55 \"${field.Name}\" should have a fixed size of ${field.FixedSize} but has ${fieldData.length\r\n              / 2}`);\r\n          validationFailed = true;\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n    let dataErr = false;\r\n\r\n    if (field.DataEncoding === 'BCD' || field.DataEncoding === 'BINARY') {\r\n      if (fieldData.length % 2 !== 0) {\r\n        errors.push(\r\n            `\\u2b55 \"${field.Name}\" should have even number of characters!`);\r\n        validationFailed = true;\r\n        dataErr = true;\r\n      }\r\n\r\n      if (field.DataEncoding === 'BINARY' && !fieldData.match(\r\n          \"^[0-9,a-f,A-F]+$\")) {\r\n        errors.push(`\\u2b55 \"${field.Name}\" supports only hex i.e 0-9,a-z,A-Z`);\r\n        validationFailed = true;\r\n      }\r\n      if (field.DataEncoding === 'BCD' && !fieldData.match(\"^[0-9]+$\")) {\r\n        errors.push(`\\u2b55 \"${field.Name}\" supports only bcd i.e 0-9`);\r\n        validationFailed = true;\r\n      }\r\n    }\r\n\r\n    if (!dataErr && field.Type === AppProps.VariableField) {\r\n\r\n      let fieldLen = fieldData.length;\r\n      if (field.DataEncoding === 'BCD' || field.DataEncoding === 'BINARY') {\r\n        fieldLen = fieldData.length / 2;\r\n      }\r\n\r\n      if (field.MinSize > 0 && fieldData.length < field.MinSize) {\r\n        errors.push(\r\n            `\\u2b55 \"${field.Name} size of ${fieldLen} is less than required min of ${field.MinSize}\" `);\r\n        validationFailed = true;\r\n      }\r\n      if (field.MaxSize > 0 && fieldData.length > field.MaxSize) {\r\n        errors.push(\r\n            `\\u2b55 \"${field.Name} size  of ${fieldLen} is greater than required max of ${field.MinSize}\" `);\r\n        validationFailed = true;\r\n      }\r\n    }\r\n\r\n    //TODO:: other checks like content etc\r\n    return validationFailed;\r\n\r\n  }\r\n\r\n}\r\n\r\nlet fieldValidator = new FieldValidator();\r\nexport default fieldValidator;","import React from \"react\";\r\nimport ExpandedText from '../../Utils/ExpandedText.js'\r\nimport {Button} from \"react-bootstrap\";\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\r\nimport Tooltip from 'react-bootstrap/Tooltip'\r\nimport {TextField} from \"@material-ui/core\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport fieldValidator from \"../../Utils/FieldValidator\";\r\nimport AppProps from \"../../Utils/Properties\";\r\n\r\n// IsoField represents a single field from a ISO8583 specification\r\nexport default class IsoField extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.fieldValueChanged = this.fieldValueChanged.bind(this);\r\n    this.fieldSelectionChanged = this.fieldSelectionChanged.bind(this);\r\n    this.onFieldUpdate = this.onFieldUpdate.bind(this);\r\n    this.appendFieldContent = this.appendFieldContent.bind(this);\r\n    this.setSelected = this.setSelected.bind(this);\r\n    this.setNewValue = this.setNewValue.bind(this);\r\n    this.showExpanded = this.showExpanded.bind(this);\r\n    this.closeExpanded = this.closeExpanded.bind(this);\r\n    this.getBgColor = this.getBgColor.bind(this);\r\n    this.setError = this.setError.bind(this);\r\n\r\n    //if the field is Message Type, MTI or Bitmap - it should stay selected\r\n    //because they're mandatory fields in ISO\r\n\r\n    this.selectable = true;\r\n    //readOnly is true when displaying a response segment\r\n    if (this.props.readOnly) {\r\n      this.selectable = false;\r\n\r\n      let selected = false;\r\n      let fieldValue = this.props.id2Value.get(this.props.field.Id)\r\n      if (fieldValue) {\r\n        selected = true;\r\n      }\r\n\r\n      this.state = {\r\n        bgColor: 'white',\r\n        hasError: false,\r\n        selected: selected,\r\n        id2Value: this.props.id2Value,\r\n        fieldValue: fieldValue,\r\n        showExpanded: false\r\n      };\r\n    } else {\r\n      let defaultFieldValue = \"\";\r\n      if ([\"Message Type\", \"MTI\", \"Bitmap\"].includes(\r\n          this.props.field.Name)) {\r\n        this.selectable = false;\r\n        if (this.props.field.Name === \"Bitmap\") {\r\n          defaultFieldValue = Array(128).fill('0').reduce((p = \"\", c) => p + c);\r\n        }\r\n\r\n        this.state = {\r\n          bgColor: \"white\",\r\n          hasError: false,\r\n          selected: true,\r\n          fieldValue: defaultFieldValue,\r\n          showExpanded: false\r\n        };\r\n      } else {\r\n        this.state = {\r\n          bgColor: \"white\",\r\n          selected: false,\r\n          hasError: false,\r\n          fieldValue: defaultFieldValue,\r\n          showExpanded: false\r\n        };\r\n      }\r\n      this.props.isoMsg.set(this.props.field.Id, this);\r\n    }\r\n  }\r\n\r\n  getBgColor() {\r\n    if (this.state.hasError) {\r\n      return \"red\";\r\n    } else {\r\n      return \"white\";\r\n    }\r\n\r\n  }\r\n\r\n  setError(hasError) {\r\n    this.setState({hasError: hasError});\r\n  }\r\n\r\n  showExpanded() {\r\n    this.setState({showExpanded: true});\r\n  }\r\n\r\n  closeExpanded() {\r\n    this.setState({showExpanded: false});\r\n  }\r\n\r\n  setNewValue(newValue) {\r\n    this.setState({fieldValue: newValue, showExpanded: false});\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (prevProps.id2Value !== this.props.id2Value) {\r\n      this.setState({\r\n        fieldValue: this.props.id2Value.get(this.props.field.Id),\r\n        id2Value: this.props.id2Value\r\n      });\r\n    }\r\n  }\r\n\r\n  onFieldUpdate(event) {\r\n    console.log(\r\n        `${this.props.field.Name}: Child field ${event.fieldName} has been updated. ChangeType: ${event.ChangeType}`);\r\n\r\n    if (this.props.field.Type === AppProps.BitmappedField) {\r\n      // get the position of the field\r\n      this.props.field.Children.forEach(f => {\r\n\r\n        if (f.Name === event.fieldName) {\r\n          let currentVal = this.state.fieldValue;\r\n          let bits = Array.from(currentVal);\r\n          console.log(\"Changing bit \" + f.Position);\r\n          if (event.ChangeType === 'FieldSelected') {\r\n            bits[f.Position - 1] = '1';\r\n            if (f.Position > 64) {\r\n              bits[0] = '1';\r\n            }\r\n          } else if (event.ChangeType === 'FieldDeselected') {\r\n            bits[f.Position - 1] = '0';\r\n\r\n            //if all bits from 65 to 128 are off then turn bit 1 off\r\n            let turnOff = true;\r\n            for (let i = 65; i <= 128; i++) {\r\n              if (bits[i - 1] === '1') {\r\n                turnOff = false;\r\n                break;\r\n              }\r\n            }\r\n            if (turnOff) {\r\n              bits[0] = '0';\r\n            }\r\n\r\n          }\r\n          let newValue = bits.reduce((p = \"\", c) => p + c);\r\n          this.setState({fieldValue: newValue})\r\n\r\n        }\r\n      })\r\n    } else {\r\n\r\n      let obj = {fieldName: this.props.field.Name};\r\n      if (event.ChangeType === 'FieldSelected') {\r\n        console.log(\"setting self as selected\", this.props.field.Name);\r\n        this.setState({selected: true});\r\n        obj.ChangeType = \"FieldSelected\";\r\n      } else if (event.ChangeType === 'FieldDeselected') {\r\n        this.setState({selected: false});\r\n        obj.ChangeType = \"FieldDeselected\";\r\n      } else {\r\n\r\n        //TODO:: field value has changed, it needs to be parsed and children\r\n        // have to be changed - wait for the new WASM library for ISO parsing capabilities\r\n        // on the frontend :-)\r\n\r\n      }\r\n\r\n      // for fixed and variable type field, if they have children\r\n      // the whole set of children and then let the parent know too\r\n\r\n      this.props.field.Children.forEach(c => {\r\n        if (event.ChangeType === 'FieldSelected') {\r\n          this.props.isoMsg.get(c.Id).setSelected(true);\r\n        } else if (event.ChangeType === 'FieldDeselected') {\r\n          this.props.isoMsg.get(c.Id).setSelected(false);\r\n        }\r\n      });\r\n\r\n      //pass on the message to the parent that I have changed\r\n      this.props.onFieldUpdate(obj);\r\n\r\n    }\r\n  }\r\n\r\n  setSelected(selected) {\r\n\r\n    this.setState({selected: selected});\r\n    this.props.field.Children.forEach(c => {\r\n      this.props.isoMsg.get(c.Id).setSelected(selected);\r\n    });\r\n\r\n  }\r\n\r\n  fieldSelectionChanged(event) {\r\n\r\n    let obj = {fieldName: this.props.field.Name};\r\n    let selected = false;\r\n    if (event.target.checked) {\r\n      obj.ChangeType = \"FieldSelected\";\r\n      selected = true;\r\n    } else {\r\n      obj.ChangeType = \"FieldDeselected\";\r\n    }\r\n\r\n    if (this.props.field.Type !== AppProps.BitmappedField) {\r\n      this.setSelected(selected);\r\n    }\r\n    this.props.onFieldUpdate(obj)\r\n  }\r\n\r\n  fieldValueChanged(event) {\r\n\r\n    let errors = []\r\n    if (fieldValidator.validate(this.props.field, event.target.value, errors)) {\r\n      this.setState(\r\n          {hasError: true, errMsg: errors[0], fieldValue: event.target.value})\r\n    } else {\r\n\r\n      this.setState(\r\n          {hasError: false, errMsg: null, fieldValue: event.target.value});\r\n      let obj = {\r\n        fieldName: this.props.field.Name,\r\n        ChangeType: \"ValueChanged\"\r\n      };\r\n      this.props.onFieldUpdate(obj)\r\n    }\r\n\r\n  }\r\n\r\n  appendFieldContent(content, field, parentField, id2Value, level) {\r\n\r\n    let key = field.Id;\r\n    if (this.props.readOnly) {\r\n      key = 'response_seg_' + field.Id;\r\n    }\r\n    content.push(<IsoField key={key} field={field} id2Value={id2Value}\r\n                           readOnly={this.props.readOnly}\r\n                           parentField={parentField} isoMsg={this.props.isoMsg}\r\n                           level={level}\r\n                           onFieldUpdate={this.onFieldUpdate}/>);\r\n  }\r\n\r\n  render() {\r\n\r\n    let selectionColumnContent;\r\n\r\n    if (this.selectable) {\r\n      selectionColumnContent =\r\n          <td align={\"center\"}><Checkbox type={\"checkbox\"} size={\"small\"}\r\n                                         color={\"primary\"}\r\n                                         checked={this.state.selected}\r\n                                         onChange={this.fieldSelectionChanged}/>\r\n          </td>\r\n    } else {\r\n      selectionColumnContent =\r\n          <td align={\"center\"}><Checkbox type={\"checkbox\"} size={\"small\"}\r\n                                         color={\"primary\"}\r\n                                         disabled={true}\r\n                                         checked={this.state.selected}\r\n                                         onChange={this.fieldSelectionChanged}/>\r\n          </td>\r\n    }\r\n\r\n    let fieldSpecColumnContent;\r\n    let positionInParent = \"\";\r\n    if (this.props.field.ParentId > 0) {\r\n      positionInParent = \"\\u2937\" + this.props.field.Position + \" \";\r\n    }\r\n\r\n    let fieldInfo = positionInParent + \" Type: \" + this.props.field.Type\r\n        + ' / ';\r\n    if (this.props.field.Type === AppProps.FixedField) {\r\n      fieldInfo += \"Length: \" + this.props.field.FixedSize + ' / '\r\n          + 'Encoding: '\r\n          + this.props.field.DataEncoding;\r\n    } else if (this.props.field.Type === AppProps.VariableField) {\r\n      fieldInfo += \"Length Indicator: \" + this.props.field.LengthIndicatorSize\r\n          + ' / ' + 'Length Encoding: ' + this.props.field.LengthEncoding\r\n          + ' / ' + 'Data Encoding: ' + this.props.field.DataEncoding;\r\n    } else if (this.props.field.Type === AppProps.BitmappedField) {\r\n    }\r\n\r\n    let children = [];\r\n\r\n    this.props.field.Children.forEach(\r\n        c => this.appendFieldContent(children, c, this.props.field,\r\n            this.state.id2Value, this.props.level + 1));\r\n\r\n    let levelIndicator = \"\";\r\n    for (let i = 0; i < this.props.level; i++) {\r\n      levelIndicator += '\\u2193';\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n          <tr>\r\n            {/* selection column */}\r\n            {selectionColumnContent}\r\n\r\n            {/* field name column*/}\r\n\r\n            <OverlayTrigger overlay={(\r\n                <Tooltip id=\"hi\"\r\n                         style={{fontSize: '10px'}}>{fieldInfo}</Tooltip>)}\r\n                            placement=\"top\">\r\n              <td style={{\r\n                width: \"100px\",\r\n                fontFamily: \"lato-regular\",\r\n                fontSize: \"14px\"\r\n              }}>\r\n                <InputLabel>{levelIndicator + ' '\r\n                + this.props.field.Name}</InputLabel>\r\n              </td>\r\n            </OverlayTrigger>\r\n\r\n            {/* field specification column */}\r\n            {/*fieldSpecColumnContent*/}\r\n\r\n            {/* field value column */}\r\n            <td>\r\n\r\n              <TextField margin={\"none\"} size={\"small\"}\r\n                         value={this.state.fieldValue}\r\n                         error={this.state.hasError}\r\n                         helperText={this.state.errMsg}\r\n                         onChange={this.fieldValueChanged}\r\n                         style={{width: \"70%\"}}\r\n                         disabled={this.props.readOnly}\r\n                         ondblclick={this.showExpanded}\r\n              />\r\n\r\n              <Button size={\"sm\"} style={{\r\n                float: 'right',\r\n                fontSize: '10px',\r\n                marginRight: '10px'\r\n              }}\r\n                      onClick={this.showExpanded}> + </Button>{' '}\r\n              <Button size={\"sm\"} style={{\r\n                float: 'right',\r\n                fontSize: '10px'\r\n              }}\r\n                      onClick={this.closeExpanded}> - </Button>\r\n\r\n            </td>\r\n\r\n          </tr>\r\n          <tr>\r\n            <td colSpan=\"3\">\r\n              <ExpandedText show={this.state.showExpanded}\r\n                            value={this.state.fieldValue}\r\n                            readOnly={this.props.readOnly}\r\n                            onClose={this.setNewValue}/>\r\n            </td>\r\n          </tr>\r\n          {children}\r\n        </React.Fragment>\r\n\r\n    );\r\n  }\r\n\r\n}","import React from 'react'\r\nimport axios from 'axios'\r\nimport {Button, Modal} from \"react-bootstrap\";\r\nimport appProps from \"../Utils/Properties\";\r\n\r\nexport default class SelectMessageDialog extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {show: props.show, selectedMsg: ''};\r\n    this.closeDialogSuccess = this.closeDialogSuccess.bind(this);\r\n    this.closeDialogFail = this.closeDialogFail.bind(this);\r\n    this.selectedMsgChanged = this.selectedMsgChanged.bind(this);\r\n  }\r\n\r\n  selectedMsgChanged(event) {\r\n    this.setState({selectedMsg: event.target.value});\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    //console.log(\"smd: componentDidUpdate\", this.state);\r\n    if (this.props.show === true && prevState.show === false) {\r\n\r\n      axios.get(appProps.loadMsgUrl, {\r\n        params: {\r\n          specId: this.props.specId,\r\n          msgId: this.props.msgId,\r\n        }\r\n      }).then(res => {\r\n       // console.log(res);\r\n        this.setState(\r\n            {savedMsgs: res.data, selectedMsg: res.data[0], show: true});\r\n\r\n      }).catch(e => {\r\n            //FIXME\r\n            console.log(e);\r\n            this.setState({show: true, errorMessage: e.response.data});\r\n          }\r\n      )\r\n    }\r\n  }\r\n\r\n  closeDialogSuccess() {\r\n    this.setState({show: false});\r\n    this.props.closeLoadMsgDialog(this.state.selectedMsg);\r\n  }\r\n\r\n  closeDialogFail() {\r\n    this.setState({show: false});\r\n    //TODO:: also tell the parent that we're done\r\n    //and return the value of the selected saved msg\r\n    this.props.closeLoadMsgDialog(null);\r\n  }\r\n\r\n  render() {\r\n\r\n    let content;\r\n\r\n    if (this.state.show) {\r\n      if (this.state.errorMessage) {\r\n        content = <div>{this.state.errorMessage}</div>\r\n      } else {\r\n        content =\r\n            <React.Fragment>\r\n              <label style={{fontFamily: \"lato-regular\"}}> Saved\r\n                Message </label>{'  '}\r\n              <select style={{fontFamily: \"lato-regular\", width: \"200px\"}}\r\n                      value={this.state.selectedMsg}\r\n                      onChange={this.selectedMsgChanged}>\r\n                {this.state.savedMsgs.map((sm) => {\r\n                  return <option key={sm} value={sm}>{sm}</option>\r\n                })\r\n                }\r\n              </select>\r\n            </React.Fragment>\r\n      }\r\n    }\r\n\r\n    return (\r\n        <Modal show={this.state.show}\r\n               onHide={this.closeDialogFail}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Load Saved Message</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>{content}</Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"primary\" onClick={this.closeDialogSuccess}>\r\n              OK\r\n            </Button>\r\n            <Button variant=\"secondary\" onClick={this.closeDialogFail}>\r\n              Close\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n\r\n    );\r\n  }\r\n\r\n}","import React from 'react'\r\nimport IsoField from \"./IsoField/IsoField\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\n// ResponseSegment displays the response to an ISO message\r\nexport default class ResponseSegment extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      show: props.show,\r\n      data: this.props.data,\r\n      msgTemplate: this.props.msgTemplate\r\n    }\r\n  }\r\n\r\n  appendFieldContent(content, field, idToField, level) {\r\n    content.push(<IsoField key={'response_seg_' + field.Id} field={field}\r\n                           id2Value={idToField}\r\n                           readOnly={true} level={level}\r\n                           onFieldUpdate={this.onFieldUpdate}/>);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n    if ((prevProps.show === false && this.props.show === true)\r\n        || (prevState.data !== this.props.data)) {\r\n      this.setState({\r\n        show: true,\r\n        data: this.props.data,\r\n        msgTemplate: this.props.msgTemplate\r\n      })\r\n    }\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    let content = [];\r\n    if (this.state.show) {\r\n\r\n      let idToField = new Map();\r\n      this.state.data.forEach(f => {\r\n        idToField.set(f.Id, f.Value);\r\n      });\r\n\r\n      this.state.msgTemplate.Fields.map(field => {\r\n        this.appendFieldContent(content, field, idToField, 0)\r\n      });\r\n\r\n      console.log(content);\r\n\r\n      return (\r\n          <React.Fragment>\r\n\r\n            {this.props.show ?\r\n                <Paper>\r\n                  <table border=\"0\" align={\"center\"}>\r\n                    <thead>\r\n                    <tr style={{\r\n                      fontFamily: \"lato-regular\",\r\n                      backgroundColor: \"#eed143\",\r\n                      fontSize: \"15px\",\r\n                      align: \"center\",\r\n                      borderBottom: 'solid',\r\n                      borderColor: 'blue'\r\n                    }}>\r\n                      <td colSpan=\"3\" align={\"center\"}>{\"Response Segment\"}</td>\r\n                    </tr>\r\n                    <tr style={{\r\n                      fontFamily: \"lato-regular\",\r\n                      backgroundColor: \"#3effba\",\r\n                      fontSize: \"14px\",\r\n                    }}>\r\n                      <td align={\"center\"}>Selection</td>\r\n                      <td align={\"center\"} style={{width:\"35%\"}}>Field</td>\r\n                      <td align={\"center\"} style={{width:\"50%\"}}>Field Data</td>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {content}\r\n                    </tbody>\r\n                  </table>\r\n                </Paper>\r\n                : null}\r\n          </React.Fragment>);\r\n\r\n    } else {\r\n      return null;\r\n    }\r\n\r\n  }\r\n}","import React from 'react'\r\nimport axios from 'axios'\r\nimport {Button, Modal} from \"react-bootstrap\";\r\nimport appProps from \"../Utils/Properties\";\r\n\r\nexport default class ParseMessageDialog extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {show: props.show, traceMsg: ''};\r\n    this.closeDialogSuccess = this.closeDialogSuccess.bind(this);\r\n    this.closeDialogFail = this.closeDialogFail.bind(this);\r\n    this.traceChanged = this.traceChanged.bind(this);\r\n  }\r\n\r\n  traceChanged(event) {\r\n    this.setState({traceMsg: event.target.value});\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    //console.log(\"smd: componentDidUpdate\", this.state);\r\n    if (this.props.show === true && prevState.show === false) {\r\n      this.setState({show: true, traceMsg: ''});\r\n    }\r\n  }\r\n\r\n  closeDialogSuccess() {\r\n    this.setState({show: false});\r\n    this.props.setTrace(this.state.traceMsg);\r\n  }\r\n\r\n  closeDialogFail() {\r\n    this.setState({show: false});\r\n    //TODO:: also tell the parent that we're done\r\n    //and return the value of the selected saved msg\r\n    this.props.setTrace(null);\r\n  }\r\n\r\n  render() {\r\n\r\n    let content;\r\n\r\n    if (this.state.show) {\r\n      if (this.state.errorMessage) {\r\n        content = <div>{this.state.errorMessage}</div>\r\n      } else {\r\n        content =\r\n            <React.Fragment>\r\n              <label\r\n                  style={{fontFamily: \"lato-regular\"}}> Trace </label>{'  '}\r\n\r\n              <textarea key={\"trace_input\"} value={this.state.traceMsg}\r\n                        onChange={this.traceChanged}\r\n                        style={{fontFamily: \"courier new\", width: '100%'}}/>\r\n\r\n\r\n            </React.Fragment>\r\n      }\r\n    }\r\n\r\n    return (\r\n\r\n        <Modal show={this.state.show}\r\n               onHide={this.closeDialogFail}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Parse Trace</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>{content}</Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"primary\" onClick={this.closeDialogSuccess}>\r\n              OK\r\n            </Button>\r\n            <Button variant=\"secondary\" onClick={this.closeDialogFail}>\r\n              Close\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n\r\n    );\r\n  }\r\n\r\n}","import React from 'react'\r\nimport axios from 'axios'\r\nimport {Button, Modal} from \"react-bootstrap\";\r\nimport appProps from \"../Utils/Properties\";\r\n\r\nexport default class SaveMessageDialog extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {show: props.show, msgName: ''};\r\n    this.closeDialogSuccess = this.closeDialogSuccess.bind(this);\r\n    this.closeDialogFail = this.closeDialogFail.bind(this);\r\n    this.msgNameChanged = this.msgNameChanged.bind(this);\r\n  }\r\n\r\n  msgNameChanged(event) {\r\n    this.setState({errorMessage: '', msgName: event.target.value});\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (this.props.show === true && prevState.show === false) {\r\n\r\n      this.setState(\r\n          {show: true, msgName: this.props.msgName});\r\n\r\n    }\r\n  }\r\n\r\n  closeDialogSuccess() {\r\n\r\n    if (!this.state.msgName || this.state.msgName === \"\" || !this.props.data) {\r\n      this.setState({errorMessage: 'Please specify a message!'});\r\n      return;\r\n    }\r\n\r\n    let postData = 'specId=' + this.props.specId + '&msgId=' + this.props.msgId\r\n        + '&dataSetName=' + this.state.msgName + '&msg=' + JSON.stringify(\r\n            this.props.data);\r\n   // console.log(postData);\r\n    axios.post(appProps.saveMsgUrl, postData).then(res => {\r\n      console.log(res);\r\n      this.props.msgSaveSuccess(this.state.msgName);\r\n      this.setState({show: false});\r\n\r\n    }).catch(e => {\r\n          this.props.msgSaveFailed(e);\r\n          this.setState({show: false});\r\n        }\r\n    );\r\n\r\n  }\r\n\r\n  closeDialogFail() {\r\n    this.props.msgSaveCancelled();\r\n    this.setState({show: false});\r\n  }\r\n\r\n  render() {\r\n\r\n    let content, errorContent;\r\n\r\n    if (this.state.show) {\r\n\r\n      console.log(\"before sending\", this.props);\r\n\r\n      if (this.state.errorMessage) {\r\n        errorContent =\r\n            <div style={{color: 'red'}}>{this.state.errorMessage}</div>\r\n      }\r\n\r\n      if (!this.props.msgId || !this.props.specId) {\r\n        content =\r\n            <div>{\"Error: Please load a spec/msg, set data before attempting to save\"}</div>\r\n      } else {\r\n        content =\r\n            <React.Fragment>\r\n              <label style={{fontFamily: \"lato-regular\"}}> Message\r\n                Name </label>{'  '}\r\n              <input type={\"text\"} key={\"msg_name_save\"}\r\n                     value={this.state.msgName} onChange={this.msgNameChanged}/>\r\n              {errorContent}\r\n            </React.Fragment>\r\n      }\r\n    }\r\n\r\n    return (\r\n        <Modal show={this.state.show}\r\n               onHide={this.closeDialogFail}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Save Message</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>{content}</Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"primary\" onClick={this.closeDialogSuccess}>\r\n              OK\r\n            </Button>\r\n            <Button variant=\"secondary\" onClick={this.closeDialogFail}>\r\n              Close\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n\r\n    );\r\n  }\r\n\r\n}","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\n// NetworkSettings is a component that manages the ip, port and MLI type\r\n// used when sending a message\r\nclass NetworkSettings extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      targetServerIp: \"127.0.0.1\",\r\n      targetServerPort: \"6666\",\r\n      mliType: \"2i\"\r\n    }\r\n\r\n    this.serverIpChanged = this.serverIpChanged.bind(this);\r\n    this.serverPortChanged = this.serverPortChanged.bind(this);\r\n    this.mliTypeChanged = this.mliTypeChanged.bind(this);\r\n\r\n  }\r\n\r\n  mliTypeChanged(e) {\r\n    this.setState({mliType: e.target.value});\r\n    this.props.onChange(this.state.targetServerIp, this.state.targetServerPort,\r\n        e.target.value)\r\n  }\r\n\r\n  serverIpChanged(e) {\r\n    this.setState({targetServerIp: e.target.value});\r\n    this.props.onChange(e.target.value, this.state.targetServerPort,\r\n        this.state.mliType)\r\n  }\r\n\r\n  serverPortChanged(e) {\r\n    this.setState({targetServerPort: e.target.value});\r\n    this.props.onChange(this.state.targetServerIp, e.target.value,\r\n        this.state.mliType)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div align={\"left\"}\r\n             style={{\r\n               align: 'left',\r\n               height: \"80px\",\r\n               verticalAlign: \"baseline\",\r\n               margin: \"10px\"\r\n             }}>\r\n\r\n\r\n          <table\r\n              style={{\r\n                fontFamily: 'lato-regular',\r\n                fontSize: '14px'\r\n              }}>\r\n            <tr>\r\n              <td>\r\n                <TextField id=\"outlined-basic\" label=\"IP\" size={\"small\"}\r\n                           variant=\"outlined\" defaultValue={\"127.0.0.1\"}\r\n                           onChange={this.serverIpChanged}/>\r\n              </td>\r\n              <td>\r\n\r\n                <TextField id=\"outlined-basic\" label=\"Port\" size={\"small\"}\r\n                           variant=\"outlined\" defaultValue={\"6666\"}\r\n                           onChange={this.serverPortChanged}/>\r\n              </td>\r\n\r\n              <td>\r\n                <TextField select size={\"small\"}\r\n                    value={this.state.mliType} variant={\"outlined\"} label={\"MLI\"}\r\n                    onChange={this.mliTypeChanged}>\r\n                  <MenuItem value={\"2i\"}>2I</MenuItem>\r\n                  <MenuItem value={\"2e\"}>2E</MenuItem>\r\n                </TextField>\r\n\r\n              </td>\r\n\r\n            </tr>\r\n          </table>\r\n\r\n\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NetworkSettings","import React from 'react';\r\nimport axios from \"axios\";\r\n//import axios from 'axios'\r\nimport IsoField from './IsoField/IsoField.js'\r\nimport SelectMessageDialog from '../Dialogs/SelectMessageDialog.js'\r\nimport {Button} from \"@material-ui/core\";\r\nimport {Modal} from 'react-bootstrap';\r\nimport appProps from '../Utils/Properties.js'\r\nimport ResponseSegment from \"./ResponseSegment\";\r\nimport ParseMessageDialog from \"../Dialogs/ParseMessageDialog\";\r\nimport SaveMessageDialog from \"../Dialogs/SaveMessageDialog\";\r\nimport fieldValidator from '../Utils/FieldValidator'\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport MoreVert from \"@material-ui/icons/MoreVert\";\r\n\r\nimport 'typeface-roboto';\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Draggable from 'react-draggable';\r\nimport NetworkSettings from \"../Utils/NetworkSettings\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\n\r\n// MessageStructure is the central component that encompasses the Request and\r\n// the response segments along with NetworkSettings etc\r\nexport default class MessageStructure extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    console.log(this.props);\r\n    console.log(\"$msg_structure$\", this.props.specs, this.props.spec,\r\n        this.props.msg);\r\n\r\n    this.state = {\r\n      msgTemplate: null,\r\n      loaded: false,\r\n      spec: props.spec,\r\n      msg: props.msg,\r\n      shouldShow: props.showMsgTemplate,\r\n      targetServerIp: '127.0.0.1',\r\n      targetServerPort: '6666',\r\n      mliType: \"2I\",\r\n      currentDataSet: '',\r\n      errDialogVisible: false,\r\n      errorMessage: '',\r\n      showLoadMessagesDialog: false,\r\n      showTraceInputDialog: false,\r\n      showSaveMsgDialog: false,\r\n      showResponse: false,\r\n      responseData: null,\r\n      reqMenuVisible: false,\r\n      selectedReqMenuItem: null\r\n    };\r\n\r\n    this.onFieldUpdate = this.onFieldUpdate.bind(this);\r\n    this.appendFieldContent = this.appendFieldContent.bind(this);\r\n    this.sendToHost = this.sendToHost.bind(this);\r\n    this.addFieldContent = this.addFieldContent.bind(this);\r\n    this.showErrorDialog = this.showErrorDialog.bind(this);\r\n    this.closeErrorDialog = this.closeErrorDialog.bind(this);\r\n    this.processError = this.processError.bind(this);\r\n    this.showLoadMessagesDialog = this.showLoadMessagesDialog.bind(this);\r\n    this.closeLoadMsgDialog = this.closeLoadMsgDialog.bind(this);\r\n    this.showUnImplementedError = this.showUnImplementedError.bind(this);\r\n    this.setTrace = this.setTrace.bind(this);\r\n    this.showTraceInputsDialog = this.showTraceInputsDialog.bind(this);\r\n    this.showSaveMsgDialog = this.showSaveMsgDialog.bind(this);\r\n\r\n    this.msgSaveSuccess = this.msgSaveSuccess.bind(this);\r\n    this.msgSaveFailed = this.msgSaveFailed.bind(this);\r\n    this.msgSaveCancelled = this.msgSaveCancelled.bind(this);\r\n    this.showInfoDialog = this.showInfoDialog.bind(this);\r\n    this.hideResponseSegment = this.hideResponseSegment.bind(this);\r\n\r\n    this.showMenu = this.showMenu.bind(this);\r\n    this.hideMenu = this.hideMenu.bind(this);\r\n    this.handleMenuClick = this.handleMenuClick.bind(this);\r\n\r\n    this.showResponseDialog = this.showResponseDialog.bind(this);\r\n    this.getTemplateLabel = this.getTemplateLabel.bind(this);\r\n    this.networkSettingsChanged = this.networkSettingsChanged.bind(this);\r\n\r\n  }\r\n\r\n  networkSettingsChanged(ip, port, mliType) {\r\n    this.setState(\r\n        {targetServerIp: ip, targetServerPort: port, mliType: mliType})\r\n  }\r\n\r\n  showMenu(event) {\r\n\r\n    this.setState({\r\n      selectedReqMenuItem: event.currentTarget,\r\n      reqMenuVisible: true\r\n    })\r\n\r\n  }\r\n\r\n  hideMenu() {\r\n    this.setState({reqMenuVisible: false})\r\n    this.setState({selectedReqMenuItem: null})\r\n  }\r\n\r\n  showResponseDialog() {\r\n    this.hideMenu()\r\n    this.setState({showResponse: true})\r\n\r\n  }\r\n\r\n  handleMenuClick(event) {\r\n    alert(event.currentTarget)\r\n\r\n    this.setState({selectedReqMenuItem: event.currentTarget})\r\n    this.hideMenu()\r\n  }\r\n\r\n  hideResponseSegment() {\r\n    this.setState({showResponse: false});\r\n  }\r\n\r\n  // Receives the trace as a callback from ParseMessageDialog component\r\n  setTrace(trace) {\r\n    if (trace != null) {\r\n      console.log(\"trace  = \", trace);\r\n      // now parse this via a API call\r\n\r\n      axios.post(appProps.parseTraceUrl + '/' + this.state.spec.Id + '/'\r\n          + this.state.msg.Id, trace).then(res => {\r\n            console.log(\"parsed msg data\", res.data);\r\n            res.data.forEach(fd => {\r\n              let fieldComponent = this.state.isoMsg.get(fd.Id);\r\n              fieldComponent.setState({selected: true, fieldValue: fd.Value});\r\n            });\r\n          }\r\n      ).catch(e => {\r\n            console.log(e);\r\n            this.processError(e)\r\n          }\r\n      )\r\n\r\n    }\r\n    this.setState({showTraceInputDialog: false})\r\n  }\r\n\r\n  showUnImplementedError() {\r\n    this.setState({\r\n      errorMessage: 'This functionality has not been implemented. Please try the old version of application.',\r\n      errDialogVisible: true\r\n    })\r\n  }\r\n\r\n  closeLoadMsgDialog(selectedMsg) {\r\n    this.setState({showLoadMessagesDialog: false, currentDataSet: selectedMsg});\r\n    console.log(\"selected msg = \", selectedMsg);\r\n\r\n    if (selectedMsg != null) {\r\n      axios.get(appProps.loadMsgUrl, {\r\n        params: {\r\n          specId: this.state.spec.Id,\r\n          msgId: this.state.msg.Id,\r\n          dsName: selectedMsg\r\n        }\r\n      }).then(res => {\r\n            //console.log(\"saved msg data\", res.data);\r\n            res.data.forEach(fd => {\r\n              let fieldComponent = this.state.isoMsg.get(fd.Id);\r\n              fieldComponent.setState({selected: true, fieldValue: fd.Value});\r\n            });\r\n          }\r\n      ).catch(e => {\r\n            console.log(e);\r\n            this.processError(e)\r\n          }\r\n      )\r\n    }\r\n\r\n  }\r\n\r\n  showInfoDialog(msg) {\r\n    this.setState({errDialogVisible: true, errorMessage: msg})\r\n  }\r\n\r\n  msgSaveSuccess(msgName) {\r\n    this.showInfoDialog(`Message ${msgName} saved successfully.`);\r\n    this.setState({showSaveMsgDialog: false});\r\n  }\r\n\r\n  msgSaveFailed(e) {\r\n    this.processError(e);\r\n    this.setState({showSaveMsgDialog: false});\r\n  }\r\n\r\n  msgSaveCancelled() {\r\n    this.setState({showSaveMsgDialog: false});\r\n  }\r\n\r\n  showSaveMsgDialog() {\r\n\r\n    // build the data and then\r\n    let content = [];\r\n    this.state.msgTemplate.Fields.forEach(f => {\r\n      this.addFieldContent(f, content);\r\n    });\r\n    this.setState({saveData: content, showSaveMsgDialog: true})\r\n  }\r\n\r\n  showTraceInputsDialog() {\r\n    this.hideMenu()\r\n    this.setState({showTraceInputDialog: true})\r\n\r\n  }\r\n\r\n  showLoadMessagesDialog() {\r\n    this.hideMenu()\r\n    this.setState({showLoadMessagesDialog: true})\r\n\r\n  }\r\n\r\n  closeErrorDialog() {\r\n    this.setState({errDialogVisible: false})\r\n  }\r\n\r\n  showErrorDialog() {\r\n    this.setState({errDialogVisible: true});\r\n  }\r\n\r\n  addFieldContent(field, content, validationErrors) {\r\n\r\n    let fData = this.state.isoMsg.get(field.Id);\r\n    if (fData.state.selected) {\r\n      if (fieldValidator.validate(field, fData.state.fieldValue,\r\n          validationErrors)) {\r\n        fData.setError(true);\r\n      } else {\r\n        fData.setError(false);\r\n      }\r\n      content.push({Id: field.Id, Value: fData.state.fieldValue});\r\n    }\r\n\r\n    field.Children.forEach(cf => {\r\n      if (fData.state.selected) {\r\n        this.addFieldContent(cf, content, validationErrors);\r\n      }\r\n    });\r\n\r\n  }\r\n\r\n  //sends the message (as JSON) to the API server to be sent to the ISO host\r\n  sendToHost() {\r\n\r\n    this.hideMenu()\r\n    let content = [];\r\n    let validationErrors = [];\r\n    this.state.msgTemplate.Fields.forEach(f => {\r\n      this.addFieldContent(f, content, validationErrors);\r\n    });\r\n    //console.log(\"After gathering data = \", content, validationErrors);\r\n\r\n    if (validationErrors.length > 0) {\r\n      let errMsg = \"\";\r\n      validationErrors.forEach(e => errMsg += e + \"\\n\");\r\n      this.setState({errorMessage: errMsg});\r\n      this.showErrorDialog();\r\n      return\r\n    }\r\n\r\n    //lets not hide and then show the response segment again\r\n    this.setState({showResponse: false, responseData: null});\r\n\r\n    let postData = 'host=' +\r\n        this.state.targetServerIp + \"&port=\" + this.state.targetServerPort\r\n        + '&mli=' + this.state.mliType\r\n        + '&specId=' + this.state.spec.Id + '&msgId='\r\n        + this.state.msg.Id + \"&msg=\" + JSON.stringify(content);\r\n    console.log(postData)\r\n    axios.post(appProps.sendMsgUrl, postData).then(res => {\r\n      console.log(\"Response from server\", res);\r\n      this.setState({showResponse: true, responseData: res.data});\r\n\r\n    }).catch(\r\n        e => {\r\n          console.log(\"error = \", e);\r\n          this.processError(e)\r\n        })\r\n\r\n  }\r\n\r\n  processError(e) {\r\n\r\n    if (!e.response) {\r\n      console.log(e);\r\n      this.setState({\r\n        errorMessage: 'Error: Unable to reach API server',\r\n        errDialogVisible: true\r\n      });\r\n      return\r\n    }\r\n\r\n    if (e.response.status === 400) {\r\n      this.setState(\r\n          {errorMessage: e.response.data, errDialogVisible: true});\r\n    } else {\r\n      this.setState(\r\n          {\r\n            errorMessage: 'Unexpected error from server - '\r\n                + e.response.status, errDialogVisible: true\r\n          });\r\n    }\r\n  }\r\n\r\n  getTemplateLabel() {\r\n    //alert(this.state.spec + \"// \" + this.state.msg)\r\n    return this.state.spec.Name + \" // \" + this.state.msg.Name;\r\n  }\r\n\r\n  onFieldUpdate(e) {\r\n    console.log(\"field updated =>\" + e.fieldName)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getMessageTemplate(this.props.spec, this.props.msg)\r\n  }\r\n\r\n  getMessageTemplate(pSpec, pMsg) {\r\n    let spec = this.props.specs.find(s => {\r\n      if (s.Name === pSpec) {\r\n        return s;\r\n      }\r\n      return null;\r\n    });\r\n    let msg = spec.Messages.find(m => {\r\n      if (m.Name === pMsg) {\r\n        return m;\r\n      }\r\n\r\n      return null;\r\n    });\r\n\r\n    let url = appProps.templateUrl + '/' + spec.Id + \"/\" + msg.Id;\r\n    console.log(url);\r\n    axios.get(url).then(\r\n        res => {\r\n          console.log(res.data);\r\n          let isoMsg = new Map();\r\n          isoMsg.set(\"msg_template\", res.data);\r\n          this.setState(\r\n              {\r\n                spec: spec,\r\n                msg: msg,\r\n                msgTemplate: res.data,\r\n                loaded: true,\r\n                isoMsg: isoMsg\r\n              });\r\n\r\n          console.log(\"MsgTemplate = \", this.state.msgTemplate);\r\n        }).catch(\r\n        err => this.setState({errorMessage: err, errDialogVisible: true}))\r\n  }\r\n\r\n  appendFieldContent(content, field, isoMsg, level) {\r\n    content.push(<IsoField key={field.Id} field={field} isoMsg={isoMsg}\r\n                           level={level}\r\n                           onFieldUpdate={this.onFieldUpdate}/>);\r\n  }\r\n\r\n  render() {\r\n\r\n    let content = [];\r\n    if (this.state.loaded === true) {\r\n      this.state.msgTemplate.Fields.map(field => {\r\n        this.appendFieldContent(content, field, this.state.isoMsg, 0)\r\n      })\r\n    }\r\n\r\n    return (\r\n\r\n        <div style={{\r\n          fontFamily: 'lato-regular',\r\n          fontSize: '12px',\r\n          fill: 'aqua'\r\n        }}>\r\n\r\n          <Modal show={this.state.errDialogVisible}\r\n                 onHide={this.closeErrorDialog}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Error</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body><pre style={{\r\n              font: \"Lato\",\r\n              fontSize: \"14px\"\r\n            }}>{this.state.errorMessage}</pre>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button variant=\"secondary\" onClick={this.closeErrorDialog}>\r\n                Close\r\n              </Button>\r\n            </Modal.Footer>\r\n          </Modal>\r\n\r\n          <SelectMessageDialog show={this.state.showLoadMessagesDialog}\r\n                               specId={this.state.spec.Id}\r\n                               msgId={this.state.msg.Id}\r\n                               closeLoadMsgDialog={this.closeLoadMsgDialog}/>\r\n\r\n          <ParseMessageDialog show={this.state.showTraceInputDialog}\r\n                              setTrace={this.setTrace}/>\r\n\r\n          <SaveMessageDialog show={this.state.showSaveMsgDialog}\r\n                             msgId={this.state.msg.Id}\r\n                             specId={this.state.spec.Id}\r\n                             data={this.state.saveData}\r\n                             msgName={this.state.currentDataSet}\r\n                             msgSaveSuccess={this.msgSaveSuccess}\r\n                             msgSaveFailed={this.msgSaveFailed}\r\n                             msgSaveCancelled={this.msgSaveCancelled}/>\r\n\r\n          <NetworkSettings onChange={this.networkSettingsChanged}/>\r\n\r\n\r\n          <div align={\"left\"}\r\n               style={{\r\n                 align: \"left\",\r\n                 display: \"inline-block\",\r\n                 width: \"40%\",\r\n                 float: \"left\",\r\n                 fill: 'aqua'\r\n               }}>\r\n\r\n            <div>\r\n\r\n              <ButtonGroup size={\"small\"} color={\"primary\"} fullWidth={true}\r\n                           variant={\"contained\"}>\r\n                <Button\r\n                    onClick={this.showTraceInputsDialog}>Parse</Button>\r\n                <Button\r\n                    onClick={this.showLoadMessagesDialog}>Load</Button>\r\n                <Button\r\n                    onClick={this.showSaveMsgDialog}>Save</Button>\r\n                <Button onClick={this.sendToHost}>Send</Button>\r\n                <Button onClick={this.showResponseDialog}\r\n                        disabled={this.state.responseData == null}>Show\r\n                  Response</Button>\r\n              </ButtonGroup>\r\n\r\n            </div>\r\n\r\n            {/*TODO:: pull this into a separate component*/}\r\n            <Paper variation={\"outlined\"} style={{verticalAlign: \"middle\"}}>\r\n              <table border=\"0\" align={\"center\"}\r\n                     style={{align: \"center\", marginTop: \"10px\", width: \"70%\"}}>\r\n                <thead>\r\n                <tr style={{\r\n                  fontFamily: \"lato-regular\",\r\n                  backgroundColor: \"#ff8f5b\",\r\n                  fontSize: \"15px\",\r\n                  borderBottom: 'solid',\r\n                  borderColor: 'blue'\r\n                }}>\r\n                  <td colSpan=\"3\" align={\"center\"}>\r\n\r\n                    <div style={{display: \"inline-block\", float: \"left\"}}>\r\n                      <IconButton\r\n                          aria-label=\"more\"\r\n                          aria-controls=\"long-menu\"\r\n                          aria-haspopup=\"true\"\r\n                          onClick={this.showMenu}\r\n                      >\r\n                        <MoreVert/>\r\n                      </IconButton>\r\n\r\n                      <Menu\r\n                          id=\"fade-menu\"\r\n                          anchorEl={this.state.selectedReqMenuItem}\r\n                          getContentAnchorEl={null}\r\n                          keepMounted\r\n                          open={this.state.reqMenuVisible}\r\n                          onClose={this.hideMenu}\r\n                          TransitionComponent={Fade}\r\n                      >\r\n                        <MenuItem dense={true}\r\n                                  onClick={this.showTraceInputsDialog}>Parse</MenuItem>\r\n                        <MenuItem dense={true}\r\n                                  onClick={this.showLoadMessagesDialog}>Load\r\n                          Message</MenuItem>\r\n                        <MenuItem dense={true}\r\n                                  onClick={this.showSaveMsgDialog}>Save\r\n                          Message</MenuItem>\r\n                        <MenuItem dense={true} onClick={this.sendToHost}>Send\r\n                          Message</MenuItem>\r\n                        <MenuItem dense={true}\r\n                                  onClick={this.showResponseDialog}>Show\r\n                          Response</MenuItem>\r\n                      </Menu>\r\n                    </div>\r\n\r\n                    <div\r\n                        style={{display: \"inline-block\"}}>{this.getTemplateLabel()}</div>\r\n                  </td>\r\n                </tr>\r\n                <tr style={{\r\n                  fontFamily: \"lato-regular\",\r\n                  backgroundColor: \"#ff8f5b\",\r\n                  fontSize: \"14px\",\r\n                }}>\r\n                  <td align={\"center\"}>Selection</td>\r\n                  <td align={\"center\"} style={{width: '35%'}}> Field</td>\r\n                  <td align={\"center\"} style={{width: '70%'}}>Field Data\r\n                  </td>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {content}\r\n                </tbody>\r\n              </table>\r\n            </Paper>\r\n\r\n            {/*<div style={{float: \"right\"}}>*/}\r\n            <Dialog open={this.state.showResponse}\r\n                    onClose={this.hideResponseSegment} scroll={\"paper\"}\r\n                    PaperComponent={PaperComponent}\r\n                    aria-labelledby=\"draggable-dialog-title\"\r\n                    maxWidth={\"sm\"} fullWidth={true}\r\n                    disableBackdropClick={true}>\r\n              <DialogTitle style={{cursor: 'move'}}\r\n                           id=\"draggable-dialog-title\"> Response -\r\n                [{this.getTemplateLabel()}]</DialogTitle>\r\n              <DialogContent dividers={true}>\r\n\r\n                <ResponseSegment show={this.state.showResponse}\r\n                                 data={this.state.responseData}\r\n                                 msgTemplate={this.state.msgTemplate}/>\r\n              </DialogContent>\r\n              <DialogActions>\r\n                <Button onClick={this.hideResponseSegment} color=\"primary\">\r\n                  Close\r\n                </Button>\r\n              </DialogActions>\r\n            </Dialog>\r\n            {/*</div>*/}\r\n          </div>\r\n\r\n\r\n          <div style={{height: \"10px\"}}>{' '}</div>\r\n\r\n        </div>\r\n\r\n    );\r\n\r\n  }\r\n\r\n}\r\n\r\nfunction PaperComponent(props) {\r\n  return (\r\n      <Draggable handle=\"#draggable-dialog-title\"\r\n                 cancel={'[class*=\"MuiDialogContent-root\"]'}>\r\n        <Paper {...props} />\r\n      </Draggable>\r\n  );\r\n}","import ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nimport TreeItem from \"@material-ui/lab/TreeItem\";\r\nimport TreeView from \"@material-ui/lab/TreeView\";\r\nimport React from \"react\";\r\nimport axios from \"axios\";\r\nimport appProps from \"../../Utils/Properties\";\r\nimport {Folder, Home, Message} from \"@material-ui/icons\"\r\n\r\n// SpecTree displays a tree of all the available specifications and the messages\r\n// defined under the spec\r\nclass SpecTree extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      specs: [],\r\n      loaded: false,\r\n      errDialogVisible: false,\r\n      errorMessage: ''\r\n    };\r\n    this.messageClicked = this.messageClicked.bind(this);\r\n  }\r\n\r\n  messageClicked(event) {\r\n    // FIXME:: This is a hack! There needs to be a better way like onSelect\r\n    let specId = event.target.parentElement.parentElement.getAttribute(\"sid\");\r\n    let msgId = event.target.parentElement.parentElement.getAttribute(\"mid\");\r\n\r\n    this.props.msgSelected(specId, msgId);\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    axios.get(appProps.allSpecsUrl).then(res => {\r\n      console.log(res.data);\r\n      this.setState({specs: res.data, loaded: true});\r\n    }).catch(\r\n        err => console.log(err))\r\n  }\r\n\r\n  buildMessages(spec) {\r\n    let content = []\r\n    spec.Messages.forEach(m => {\r\n      content.push(<TreeItem nodeId={\"nodeId_\" + m.Id} sid={spec.Id} mid={m.Id}\r\n                             label={m.Name}\r\n                             onClick={this.messageClicked}/>)\r\n    });\r\n    return content\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    if (this.state.loaded === true) {\r\n\r\n      let content = [];\r\n      this.state.specs.forEach(s => {\r\n\r\n        content.push(<TreeItem align=\"left\" nodeId={\"nodeId_\" + s.Id}\r\n                               icon={<Folder color={\"primary\"}/>}\r\n                               label={s.Name}>{this.buildMessages(\r\n            s)}</TreeItem>);\r\n\r\n      });\r\n\r\n      let treeContent = <TreeItem nodeId={\"nodeId_0\"}\r\n                                  icon={<Home color={\"primary\"}/>}\r\n                                  label={\"ISO8583 Specifications\"}>{content}</TreeItem>;\r\n\r\n      return (<React.Fragment>\r\n            <TreeView\r\n                defaultExpanded={['nodeId_0']}\r\n                defaultCollapseIcon={<ExpandMoreIcon/>}\r\n                defaultExpandIcon={<ChevronRightIcon/>}\r\n                defaultParentIcon={<Folder color={\"primary\"}/>}\r\n                defaultEndIcon={<Message color=\"primary\"/>}\r\n            >\r\n              {treeContent}\r\n            </TreeView>\r\n\r\n\r\n          </React.Fragment>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport default SpecTree;","import React from 'react';\r\nimport axios from 'axios'\r\nimport MessageStructure from '../Iso/MessageStructure.js'\r\nimport {Button, Modal} from \"react-bootstrap\";\r\nimport appProps from \"../Utils/Properties\";\r\nimport SpecTree from \"./SpecTree/SpecTree\";\r\n\r\nclass NavBar extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      specs: [],\r\n      currentSpec: \"Select\",\r\n      currentSpecMsg: \"\",\r\n      showMsgTemplate: false,\r\n      loaded: false,\r\n      errDialogVisible: false,\r\n      errorMessage: ''\r\n    };\r\n    this.specChanged = this.specChanged.bind(this);\r\n    this.messageChanged = this.messageChanged.bind(this);\r\n    this.msgSelected = this.msgSelected.bind(this);\r\n    this.getSpecByID = this.getSpecByID.bind(this);\r\n\r\n    this.msgTemplateRef = React.createRef();\r\n\r\n  }\r\n\r\n  msgSelected(specId, msgId) {\r\n\r\n    console.log(specId, msgId)\r\n    console.log(this.state.specs)\r\n    let spec = this.getSpecByID(parseInt(specId))\r\n    console.log(\"spec = \", spec)\r\n    let msg = null;\r\n    spec.Messages.forEach(m => {\r\n      if (m.Id === parseInt(msgId)) {\r\n        msg = m;\r\n      }\r\n    })\r\n\r\n    this.setState(\r\n        {loaded: true, currentSpec: spec.Name, currentSpecMsg: msg.Name});\r\n\r\n  }\r\n\r\n  closeErrorDialog() {\r\n    this.setState({errDialogVisible: false})\r\n  }\r\n\r\n  showErrorDialog() {\r\n    this.setState({errDialogVisible: true});\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    axios.get(appProps.allSpecsUrl).then(res => {\r\n      console.log(res.data);\r\n      this.setState({specs: res.data, loaded: true});\r\n    }).catch(\r\n        err => console.log(err))\r\n  }\r\n\r\n  render() {\r\n\r\n    let msg;\r\n    let spec;\r\n\r\n    if (this.state.loaded === true) {\r\n      spec = this.getCurrentSpec();\r\n      if (spec == null) {\r\n        spec = this.state.specs[0];\r\n      }\r\n\r\n      if (!this.state.currentSpecMsg) {\r\n        msg = spec.Messages[0].Name;\r\n      } else {\r\n        msg = this.state.currentSpecMsg;\r\n      }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n\r\n          <div>\r\n            <Modal show={this.state.errDialogVisible}\r\n                   onHide={this.closeErrorDialog}>\r\n              <Modal.Header closeButton>\r\n                <Modal.Title>Error</Modal.Title>\r\n              </Modal.Header>\r\n              <Modal.Body>{this.state.errorMessage}</Modal.Body>\r\n              <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={this.closeErrorDialog}>\r\n                  Close\r\n                </Button>\r\n              </Modal.Footer>\r\n            </Modal>\r\n\r\n\r\n            <div style={{\r\n              float: \"left\",\r\n              display: \"inline-block\",\r\n              marginRight: \"20px\",\r\n              marginLeft: \"20px\",\r\n              backgroundColor:'#fbfff0'\r\n\r\n            }}>\r\n              <SpecTree msgSelected={this.msgSelected}/>\r\n            </div>\r\n            <div align=\"center\" style={{backgroundColor:'#fbfff0'}}>\r\n              {\r\n                this.state.loaded && this.state.currentSpec !== \"Select\" ?\r\n                    <MessageStructure key={this.state.currentSpec + \"_\" + msg}\r\n                                      ref={this.msgTemplateRef}\r\n                                      specs={this.state.specs}\r\n                                      spec={this.state.currentSpec}\r\n                                      msg={this.state.currentSpecMsg}/>\r\n                    : null\r\n              }\r\n            </div>\r\n          </div>\r\n        </React.Fragment>\r\n\r\n    );\r\n  }\r\n\r\n  specChanged(event) {\r\n\r\n    this.setState({\r\n      currentSpec: event.target.value,\r\n      currentSpecMsg: \"\"\r\n    });\r\n\r\n    console.log(event.target.value);\r\n    if (this.state.loaded && event.target.value !== \"Select\") {\r\n      console.log(\"calling update - specChanged\");\r\n      let spec = this.getSpecByName(event.target.value);\r\n    }\r\n  }\r\n\r\n  messageChanged(event) {\r\n    this.setState({currentSpecMsg: event.target.value});\r\n\r\n    if (this.state.loaded && this.state.currentSpec !== \"Select\") {\r\n      console.log(\"calling update - msgChanged\");\r\n\r\n    }\r\n  }\r\n\r\n  // builds a combo box for specifications\r\n  specsDropDown() {\r\n    return (\r\n        <select style={{fontFamily: \"lato-regular\", width: \"200px\",}}\r\n                onChange={this.specChanged}>\r\n          <option key={\"Select\"} value={\"Select\"}>Select</option>\r\n          {\r\n            this.state.specs.map((s) => {\r\n              return <option key={s.Name} value={s.Name}>{s.Name}</option>\r\n            })\r\n          }\r\n\r\n        </select>);\r\n  }\r\n\r\n  // builds and returns a combo box for messages for the current spec\r\n  messagesDropDown() {\r\n\r\n    let spec;\r\n\r\n    if (this.state.loaded) {\r\n      spec = this.getCurrentSpec();\r\n    }\r\n\r\n    // no spec loaded\r\n    if (this.state.currentSpec === \"Select\") {\r\n      return (<select/>);\r\n    } else {\r\n\r\n      return (\r\n\r\n          <select value={this.state.currentSpecMsg}\r\n                  style={{fontFamily: \"lato-regular\", width: \"150px\"}}\r\n                  onChange={this.messageChanged}>\r\n            {\r\n              spec.Messages.map(msg => {\r\n                return <option key={msg.Id}\r\n                               value={msg.Name}>{msg.Name}</option>\r\n              })\r\n            }\r\n\r\n          </select>\r\n\r\n      )\r\n\r\n    }\r\n\r\n  }\r\n\r\n  // returns the currently loaded spec (if there is one) else null\r\n  getCurrentSpec() {\r\n    return this.state.specs.find((s, i) => {\r\n      if (s.Name === this.state.currentSpec) {\r\n        return s;\r\n      }\r\n      return null;\r\n    });\r\n  }\r\n\r\n  // returns specification given its name\r\n  getSpecByName(name) {\r\n    return this.state.specs.find((s, i) => {\r\n      if (s.Name === name) {\r\n        return s;\r\n      }\r\n      return null;\r\n    });\r\n  }\r\n\r\n  // returns specification given its name\r\n  getSpecByID(specId) {\r\n    return this.state.specs.find((s, i) => {\r\n      if (s.Id === specId) {\r\n        return s;\r\n      }\r\n      return null;\r\n    });\r\n  }\r\n\r\n}\r\n\r\nexport default NavBar","import React from 'react';\nimport './App.css';\nimport NavBar from './components/Navigation/NavBar.js'\n\nfunction App() {\n  return (\n      <div style={{backgroundColor:'#fbfff0'}}>\n        <h1 style={{fontFamily: \"shadows-into-light\"}}>ISO WebSim - ISO8583 Web\n          Simulator</h1>\n        <a style={{fontFamily: 'lato-regular', fontSize: '12px'}}\n           href={\"/iso/home\"} target={\"_blank\"}>[Non React App]</a>\n        <a style={{fontFamily: 'lato-regular', fontSize: '12px'}}\n          href={\"/iso/v0/server\"} target={\"_blank\"}>[Manage Servers]</a>\n\n        <div className=\"App\">\n          <NavBar/>\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n//ReactDOM.render(<NavBar />, document.getElementById('nav_bar'));\nReactDOM.render(<App style={{backgroundColor:'#fbfff0'}}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}